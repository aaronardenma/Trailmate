{
  "stats": {
    "suites": 36,
    "tests": 66,
    "passes": 66,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-07T04:00:30.822Z",
    "end": "2025-07-07T04:01:17.287Z",
    "duration": 46465,
    "testsRegistered": 66,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8280b703-39b0-40f0-9890-f6e8328ed36b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 37,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await Trails.deleteMany({});\nconst inserted = await Trails.insertMany(sampleTrails);\ntrailId = inserted[0]._id.toString();",
          "err": {},
          "uuid": "d8f7f9f0-839e-412f-981e-a0ef39766bdf",
          "parentUUID": "8280b703-39b0-40f0-9890-f6e8328ed36b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 22,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await Trails.deleteMany({});",
          "err": {},
          "uuid": "a5ca7c2a-a4c4-49f4-aaa2-5b25fd30bc6b",
          "parentUUID": "8280b703-39b0-40f0-9890-f6e8328ed36b",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "00b8ba3e-2333-4d99-948f-45e346675f12",
          "title": "Comment API Routes",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\comment.test.js",
          "file": "\\test\\comment.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Comment API Routes\"",
              "fullTitle": "Comment API Routes \"before each\" hook in \"Comment API Routes\"",
              "timedOut": false,
              "duration": 480,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Post.deleteMany({});\nawait Comment.deleteMany({});\nuser = await User.create({\n    firstName: 'Test',\n    lastName: 'User',\n    email: 'test@example.com',\n    password: 'password123'\n});\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret', { expiresIn: '1h' });\npost = await Post.create({\n    userId: user._id,\n    title: 'Test Post',\n    description: 'Post description',\n    photoUrl: '',\n    likes: 0,\n    likedByUsers: []\n});",
              "err": {},
              "uuid": "60215916-76e0-4736-ae62-8acecf10bab6",
              "parentUUID": "00b8ba3e-2333-4d99-948f-45e346675f12",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Comment API Routes\"",
              "fullTitle": "Comment API Routes \"after each\" hook in \"Comment API Routes\"",
              "timedOut": false,
              "duration": 60,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Post.deleteMany({});\nawait Comment.deleteMany({});",
              "err": {},
              "uuid": "cc24a352-b50c-41ef-b683-754af1f0b2f0",
              "parentUUID": "00b8ba3e-2333-4d99-948f-45e346675f12",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ee7215b4-bc3f-4232-ba93-e7c5985f097a",
              "title": "POST /api/comments/add/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\comment.test.js",
              "file": "\\test\\comment.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully add a comment to a post",
                  "fullTitle": "Comment API Routes POST /api/comments/add/:postId should successfully add a comment to a post",
                  "timedOut": false,
                  "duration": 133,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const commentText = 'This is a test comment';\nconst res = await chai\n    .request(app)\n    .post(`/api/comments/add/${post._id}`)\n    .set('Cookie', `token=${token}`)\n    .send({ comment: commentText });\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property('message', 'Comment added successfully');\nexpect(res.body.comment).to.include({\n    comment: commentText,\n    postID: post._id.toString(),\n    userID: user._id.toString(),\n});",
                  "err": {},
                  "uuid": "83999c01-66f0-4300-8961-337a639f948e",
                  "parentUUID": "ee7215b4-bc3f-4232-ba93-e7c5985f097a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail without a valid token",
                  "fullTitle": "Comment API Routes POST /api/comments/add/:postId should fail without a valid token",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .post(`/api/comments/add/${post._id}`)\n    .send({ comment: 'No token comment' });\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "cd134f88-310f-4195-b985-02be79109142",
                  "parentUUID": "ee7215b4-bc3f-4232-ba93-e7c5985f097a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for empty comment",
                  "fullTitle": "Comment API Routes POST /api/comments/add/:postId should return 400 for empty comment",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .post(`/api/comments/add/${post._id}`)\n    .set('Cookie', `token=${token}`)\n    .send({ comment: '' });\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "f606c97b-b05b-4b98-8e71-46c033a9b026",
                  "parentUUID": "ee7215b4-bc3f-4232-ba93-e7c5985f097a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83999c01-66f0-4300-8961-337a639f948e",
                "cd134f88-310f-4195-b985-02be79109142",
                "f606c97b-b05b-4b98-8e71-46c033a9b026"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 152,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "9c4bd29f-d05f-4219-b9db-508a139e1848",
              "title": "GET /api/comments/post/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\comment.test.js",
              "file": "\\test\\comment.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve comments for a post",
                  "fullTitle": "Comment API Routes GET /api/comments/post/:postId should retrieve comments for a post",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Comment.create({\n    userID: user._id,\n    postID: post._id,\n    comment: 'Nice post!'\n});\nconst res = await chai\n    .request(app)\n    .get(`/api/comments/post/${post._id}`);\nexpect(res).to.have.status(200);\nexpect(res.body.comments).to.be.an('array');\nexpect(res.body.comments[0]).to.have.property('comment', 'Nice post!');",
                  "err": {},
                  "uuid": "e577daa1-ec04-4501-8433-042552c7986c",
                  "parentUUID": "9c4bd29f-d05f-4219-b9db-508a139e1848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid post ID format",
                  "fullTitle": "Comment API Routes GET /api/comments/post/:postId should return 400 for invalid post ID format",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get(`/api/comments/post/invalid123`);\nexpect(res).to.have.status(400);\nexpect(res.body).to.have.property('error', 'Invalid post ID format');",
                  "err": {},
                  "uuid": "b3349282-e405-46d3-ad57-a2d88fcd17e1",
                  "parentUUID": "9c4bd29f-d05f-4219-b9db-508a139e1848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return empty array if no comments exist",
                  "fullTitle": "Comment API Routes GET /api/comments/post/:postId should return empty array if no comments exist",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get(`/api/comments/post/${post._id}`);\nexpect(res).to.have.status(200);\nexpect(res.body.comments).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "28144d92-071a-4efb-a710-2f10d0a42c64",
                  "parentUUID": "9c4bd29f-d05f-4219-b9db-508a139e1848",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e577daa1-ec04-4501-8433-042552c7986c",
                "b3349282-e405-46d3-ad57-a2d88fcd17e1",
                "28144d92-071a-4efb-a710-2f10d0a42c64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "d3f23d85-9706-45e6-a391-dcfe22bc0f04",
          "title": "Favorite API Routes",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
          "file": "\\test\\favorite.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Favorite API Routes\"",
              "fullTitle": "Favorite API Routes \"before each\" hook in \"Favorite API Routes\"",
              "timedOut": false,
              "duration": 535,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Favorite.deleteMany({});\nawait User.deleteMany({});\nuser = await User.create({\n    firstName: 'Test',\n    lastName: 'User',\n    email: 'favorite@example.com',\n    password: 'password123'\n});\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret', { expiresIn: '1h' });\ntrail = await Trail.create( {\n    name: \"Oceanview Path\",\n    latitude: 49.2700,\n    longitude: -123.1250,\n    photoUrl: \"https://example.com/trails/oceanview.jpg\",\n    location: \"Burnaby\",\n    description: \"Moderate trail with breathtaking views of the ocean.\",\n    avgElevationM: 280,\n    difficulty: \"Moderate\",\n    distanceKm: 6.1,\n    tags: []\n})\ntrailID = trail._id",
              "err": {},
              "uuid": "857278f0-b18d-425e-b3a2-c9cd5f273e62",
              "parentUUID": "d3f23d85-9706-45e6-a391-dcfe22bc0f04",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Favorite API Routes\"",
              "fullTitle": "Favorite API Routes \"after each\" hook in \"Favorite API Routes\"",
              "timedOut": false,
              "duration": 76,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Favorite.deleteMany({});\nawait User.deleteMany({});\nawait Trail.deleteMany({});",
              "err": {},
              "uuid": "ae5b8a0b-cb73-43c1-a587-d6fc82ea7d74",
              "parentUUID": "d3f23d85-9706-45e6-a391-dcfe22bc0f04",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3070f981-cc04-48cf-96fd-def76885303d",
              "title": "POST /api/favorites/addFavorite",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
              "file": "\\test\\favorite.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add a trail to favorites",
                  "fullTitle": "Favorite API Routes POST /api/favorites/addFavorite should add a trail to favorites",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/favorite/addFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(201);\nconsole.log(res.body.message)\nexpect(res.body).to.have.property('message', 'Favorite added successfully');",
                  "err": {},
                  "uuid": "17ced9e4-9cab-4b31-9680-7b702b76613b",
                  "parentUUID": "3070f981-cc04-48cf-96fd-def76885303d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if trailID is missing",
                  "fullTitle": "Favorite API Routes POST /api/favorites/addFavorite should return 400 if trailID is missing",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/favorite/addFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({});\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "a26b3147-24ca-4398-bd4e-2b711cc565ed",
                  "parentUUID": "3070f981-cc04-48cf-96fd-def76885303d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if trail already exists in favorites",
                  "fullTitle": "Favorite API Routes POST /api/favorites/addFavorite should return 409 if trail already exists in favorites",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Favorite.create({ userId: user._id, trailID });\nconst res = await chai.request(app)\n    .post('/api/favorite/addFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(409);",
                  "err": {},
                  "uuid": "29a53842-aa75-4061-81ab-28d982ec7d9e",
                  "parentUUID": "3070f981-cc04-48cf-96fd-def76885303d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17ced9e4-9cab-4b31-9680-7b702b76613b",
                "a26b3147-24ca-4398-bd4e-2b711cc565ed",
                "29a53842-aa75-4061-81ab-28d982ec7d9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 135,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "3ca82e1d-2f95-49b5-8549-c2e63aeaa296",
              "title": "GET /api/favorites/getFavoriteTrails",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
              "file": "\\test\\favorite.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return favorite trails for the user",
                  "fullTitle": "Favorite API Routes GET /api/favorites/getFavoriteTrails should return favorite trails for the user",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Favorite.create({ userId: user._id, trailID });\nconst res = await chai.request(app)\n    .get('/api/favorite/getFavoriteTrails')\n    .set('Cookie', `token=${token}`)\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body[0].trailID.toString()).to.equal(trailID.toString());",
                  "err": {},
                  "uuid": "0b3bcc30-6983-46ad-ac32-f0e0d49466ba",
                  "parentUUID": "3ca82e1d-2f95-49b5-8549-c2e63aeaa296",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b3bcc30-6983-46ad-ac32-f0e0d49466ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 55,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "13e85e1d-4163-4dae-8370-0e8ee5f0edeb",
              "title": "POST /api/favorites/isFavorite",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
              "file": "\\test\\favorite.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if trail is favorited",
                  "fullTitle": "Favorite API Routes POST /api/favorites/isFavorite should return true if trail is favorited",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Favorite.create({ userId: user._id, trailID });\nconst res = await chai.request(app)\n    .post('/api/favorite/isFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('isFavorite', true);",
                  "err": {},
                  "uuid": "8ae17bdb-81e1-4843-8bf2-d26ef4bdb3bd",
                  "parentUUID": "13e85e1d-4163-4dae-8370-0e8ee5f0edeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if trail is not favorited",
                  "fullTitle": "Favorite API Routes POST /api/favorites/isFavorite should return false if trail is not favorited",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/favorite/isFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID: trailID });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('isFavorite', false);",
                  "err": {},
                  "uuid": "f0f60eb2-1ea2-4791-ab7d-bc0695271a12",
                  "parentUUID": "13e85e1d-4163-4dae-8370-0e8ee5f0edeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if trailID is missing",
                  "fullTitle": "Favorite API Routes POST /api/favorites/isFavorite should return 400 if trailID is missing",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/favorite/isFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({});\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "4caae097-4de9-4281-b9f1-7906854c1bf0",
                  "parentUUID": "13e85e1d-4163-4dae-8370-0e8ee5f0edeb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ae17bdb-81e1-4843-8bf2-d26ef4bdb3bd",
                "f0f60eb2-1ea2-4791-ab7d-bc0695271a12",
                "4caae097-4de9-4281-b9f1-7906854c1bf0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "6570c0a9-1eec-4852-ba50-0a9b1ab0e564",
              "title": "DELETE /api/favorites/deleteFavorite",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
              "file": "\\test\\favorite.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove a favorite trail",
                  "fullTitle": "Favorite API Routes DELETE /api/favorites/deleteFavorite should remove a favorite trail",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Favorite.create({ userId: user._id, trailID });\nconst res = await chai.request(app)\n    .delete('/api/favorite/deleteFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('message', 'Favorite removed successfully');",
                  "err": {},
                  "uuid": "16bdc9ce-b01e-443c-a2f2-1a763be66a80",
                  "parentUUID": "6570c0a9-1eec-4852-ba50-0a9b1ab0e564",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if trail is not found",
                  "fullTitle": "Favorite API Routes DELETE /api/favorites/deleteFavorite should return 404 if trail is not found",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .delete('/api/favorite/deleteFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(404);",
                  "err": {},
                  "uuid": "9476bd5b-99fe-48a7-aadd-f0d42351c4e4",
                  "parentUUID": "6570c0a9-1eec-4852-ba50-0a9b1ab0e564",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if trailID is missing",
                  "fullTitle": "Favorite API Routes DELETE /api/favorites/deleteFavorite should return 400 if trailID is missing",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .delete('/api/favorite/deleteFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({});\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "2ddc659c-e35a-470b-9718-cbc39431f54a",
                  "parentUUID": "6570c0a9-1eec-4852-ba50-0a9b1ab0e564",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16bdc9ce-b01e-443c-a2f2-1a763be66a80",
                "9476bd5b-99fe-48a7-aadd-f0d42351c4e4",
                "2ddc659c-e35a-470b-9718-cbc39431f54a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 141,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ad701188-22a4-464b-871c-8d6e25b00e2b",
          "title": "Gear API Routes",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\gear.test.js",
          "file": "\\test\\gear.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Gear API Routes\"",
              "fullTitle": "Gear API Routes \"before each\" hook in \"Gear API Routes\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Gear.deleteMany({});\nawait Gear.insertMany(sampleGear);",
              "err": {},
              "uuid": "45976116-f85c-416f-80a0-6a0fb262ff94",
              "parentUUID": "ad701188-22a4-464b-871c-8d6e25b00e2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Gear API Routes\"",
              "fullTitle": "Gear API Routes \"after each\" hook in \"Gear API Routes\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Gear.deleteMany({});",
              "err": {},
              "uuid": "83cc644e-12c6-4c89-b1af-42e8a4f33277",
              "parentUUID": "ad701188-22a4-464b-871c-8d6e25b00e2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all gear items",
              "fullTitle": "Gear API Routes should return all gear items",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get('/api/gear')\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('array');\n        expect(res.body.length).to.equal(2);\n        console.log(res.body[0])\n        expect(res.body[0]).to.have.property('category');\n        expect(res.body[0]).to.have.property('items');\n        done();\n    });",
              "err": {},
              "uuid": "2575ef7a-fc4e-482e-882f-987061684da8",
              "parentUUID": "ad701188-22a4-464b-871c-8d6e25b00e2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no gear exists",
              "fullTitle": "Gear API Routes should return an empty array if no gear exists",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Gear.deleteMany({});\nconst res = await chai.request(app).get('/api/gear');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "b4c95709-1f66-4329-aa43-06728dccbca1",
              "parentUUID": "ad701188-22a4-464b-871c-8d6e25b00e2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2575ef7a-fc4e-482e-882f-987061684da8",
            "b4c95709-1f66-4329-aa43-06728dccbca1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "114b8737-2965-474c-aa42-b987b504da83",
          "title": "Post API",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
          "file": "\\test\\post.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Post API\"",
              "fullTitle": "Post API \"before each\" hook in \"Post API\"",
              "timedOut": false,
              "duration": 521,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Post.deleteMany({});\nconst user = new User({\n    email: 'test@example.com',\n    password: 'password123',\n    firstName: 'Test',\n    lastName: 'User',\n    gender: 'male',\n    visibility: 'public'\n});\nawait user.save();\nuserId = user._id.toString();\ntoken = jwt.sign({ id: userId, email: user.email }, process.env.JWT_SECRET, {\n    expiresIn: '1h'\n});\nconst post = await Post.create({\n    userId,\n    title: 'Initial Post',\n    description: 'Initial Description',\n    dateOfPost: new Date(),\n    likedByUsers: [],\n    comments: [],\n    likes: 0,\n    photoUrl: ''\n});\npostId = post._id.toString();",
              "err": {},
              "uuid": "14558c99-5a23-4c39-a7ee-78cd940958d5",
              "parentUUID": "114b8737-2965-474c-aa42-b987b504da83",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "08eb8b46-61b7-4e5b-86b9-560e9797b968",
              "title": "GET /getPosts",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all posts with user info and respect user visibility",
                  "fullTitle": "Post API GET /getPosts should return all posts with user info and respect user visibility",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.findByIdAndUpdate(userId, {\n    visibility: 'private',\n    firstName: 'John',\n    lastName: 'Doe',\n    gender: 'male'\n});\nconst res = await chai.request(app).get('/getPosts');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nconst post = res.body[0];\nexpect(post).to.have.property('userId');\nexpect(post.userId).to.include.keys('_id', 'firstName', 'lastName', 'gender');\nexpect(post.userId).to.not.have.property('email');",
                  "err": {},
                  "uuid": "2f876037-36be-49de-8d2d-b66e8faa6771",
                  "parentUUID": "08eb8b46-61b7-4e5b-86b9-560e9797b968",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include full user info if visibility is public",
                  "fullTitle": "Post API GET /getPosts should include full user info if visibility is public",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.findByIdAndUpdate(userId, { visibility: 'public' });\nconst res = await chai.request(app).get('/getPosts');\nexpect(res).to.have.status(200);\nconst post = res.body[0];\nexpect(post.userId).to.have.property('email', 'test@example.com');\nexpect(post.userId).to.have.property('firstName', 'Test');",
                  "err": {},
                  "uuid": "7bb9e355-0950-494e-8a76-41635d89b1f0",
                  "parentUUID": "08eb8b46-61b7-4e5b-86b9-560e9797b968",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f876037-36be-49de-8d2d-b66e8faa6771",
                "7bb9e355-0950-494e-8a76-41635d89b1f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 81,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "10bea040-d92f-435b-abc4-7a58809ca030",
              "title": "GET /getPostsForUser/",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return posts belonging to the authenticated user",
                  "fullTitle": "Post API GET /getPostsForUser/ should return posts belonging to the authenticated user",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/getPostsForUser/')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.some(p => p._id === postId)).to.be.true;",
                  "err": {},
                  "uuid": "70df70eb-d71f-4b32-b4e0-f5e3feb2a6d0",
                  "parentUUID": "10bea040-d92f-435b-abc4-7a58809ca030",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 if no token provided",
                  "fullTitle": "Post API GET /getPostsForUser/ should return 401 if no token provided",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/getPostsForUser/');\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "27ab5af5-2598-4b4b-851d-d05ab8132aa5",
                  "parentUUID": "10bea040-d92f-435b-abc4-7a58809ca030",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70df70eb-d71f-4b32-b4e0-f5e3feb2a6d0",
                "27ab5af5-2598-4b4b-851d-d05ab8132aa5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "2a93ed52-362a-4fac-8b62-0c4dc15307c3",
              "title": "POST /add",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a post for authenticated user",
                  "fullTitle": "Post API POST /add should create a post for authenticated user",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postPayload = {\n    title: 'New post',\n    description: 'Post description',\n    photoUrl: 'http://example.com/image.png'\n};\nconst res = await chai\n    .request(app)\n    .post('/add')\n    .set('Cookie', `token=${token}`)\n    .send(postPayload);\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property('message', 'Post created successfully');\nexpect(res.body.post).to.include(postPayload);\nexpect(res.body.post).to.have.property('userId', userId);",
                  "err": {},
                  "uuid": "b16aca76-1eeb-4130-85c8-ab6bcac29ef6",
                  "parentUUID": "2a93ed52-362a-4fac-8b62-0c4dc15307c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 without token",
                  "fullTitle": "Post API POST /add should return 401 without token",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/add').send({ title: 'x' });\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "53755cbd-8990-4acd-9b73-21154dd30a14",
                  "parentUUID": "2a93ed52-362a-4fac-8b62-0c4dc15307c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b16aca76-1eeb-4130-85c8-ab6bcac29ef6",
                "53755cbd-8990-4acd-9b73-21154dd30a14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 69,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "86ea5d2f-0ad6-4df9-8c6d-f91757cb28be",
              "title": "PUT /updatePost/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update an existing post",
                  "fullTitle": "Post API PUT /updatePost/:postId should update an existing post",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatePayload = {\n    title: 'Updated title',\n    description: 'Updated desc',\n    photoUrl: 'http://example.com/updated.png',\n    likes: 5,\n    comments: ['Nice!']\n};\nconst res = await chai\n    .request(app)\n    .put(`/updatePost/${postId}`)\n    .set('Cookie', `token=${token}`)\n    .send(updatePayload);\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property('message', 'Post created successfully');\nexpect(res.body.post.title).to.equal(updatePayload.title);\nexpect(res.body.post.description).to.equal(updatePayload.description);\nexpect(res.body.post.photoUrl).to.equal(updatePayload.photoUrl);\nexpect(res.body.post.likes).to.equal(updatePayload.likes);",
                  "err": {},
                  "uuid": "d020eb10-9dc9-4c81-ba7c-5f2688ec9268",
                  "parentUUID": "86ea5d2f-0ad6-4df9-8c6d-f91757cb28be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 without token",
                  "fullTitle": "Post API PUT /updatePost/:postId should return 401 without token",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).put(`/updatePost/${postId}`).send({ title: 'x' });\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "93965fbf-0826-473c-a149-0061455af6bd",
                  "parentUUID": "86ea5d2f-0ad6-4df9-8c6d-f91757cb28be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d020eb10-9dc9-4c81-ba7c-5f2688ec9268",
                "93965fbf-0826-473c-a149-0061455af6bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 52,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "0d89e392-45f1-49f3-a991-9728ab9eebd6",
              "title": "PUT /updatePostLikes/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should like a post if not already liked",
                  "fullTitle": "Post API PUT /updatePostLikes/:postId should like a post if not already liked",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .put(`/updatePostLikes/${postId}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('You liked this post!');",
                  "err": {},
                  "uuid": "99650c17-be41-4d0f-be6d-a41ac05bc68c",
                  "parentUUID": "0d89e392-45f1-49f3-a991-9728ab9eebd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should unlike the post if already liked",
                  "fullTitle": "Post API PUT /updatePostLikes/:postId should unlike the post if already liked",
                  "timedOut": false,
                  "duration": 161,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await chai\n    .request(app)\n    .put(`/updatePostLikes/${postId}`)\n    .set('Cookie', `token=${token}`);\nconst res = await chai\n    .request(app)\n    .put(`/updatePostLikes/${postId}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('You unliked this post.');",
                  "err": {},
                  "uuid": "203e39a0-5c6f-4079-951a-79b5cbf3962d",
                  "parentUUID": "0d89e392-45f1-49f3-a991-9728ab9eebd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if post does not exist",
                  "fullTitle": "Post API PUT /updatePostLikes/:postId should return 404 if post does not exist",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .put('/updatePostLikes/507f1f77bcf86cd799439011')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(404);\nexpect(res.body.message).to.equal('Post not found');",
                  "err": {},
                  "uuid": "f9b1ce4e-59a6-45fe-b5c5-3eb708becfda",
                  "parentUUID": "0d89e392-45f1-49f3-a991-9728ab9eebd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99650c17-be41-4d0f-be6d-a41ac05bc68c",
                "203e39a0-5c6f-4079-951a-79b5cbf3962d",
                "f9b1ce4e-59a6-45fe-b5c5-3eb708becfda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 242,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "381ef431-d0e6-4f6d-8f0e-58a42ab7c62d",
              "title": "PUT /updatePostComments/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 500 if error occurs",
                  "fullTitle": "Post API PUT /updatePostComments/:postId should return 500 if error occurs",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .put('/updatePostComments/invalidid')\n    .send({ comments: { currentUserComments: 'test' } });\nexpect(res).to.have.status(500);",
                  "err": {},
                  "uuid": "41e326bc-4ecf-4c31-a10f-0516a4e130cb",
                  "parentUUID": "381ef431-d0e6-4f6d-8f0e-58a42ab7c62d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41e326bc-4ecf-4c31-a10f-0516a4e130cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b46b75fd-3d90-4315-a56d-bd3ec6825c65",
              "title": "DELETE /deletePost/:id",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete the post",
                  "fullTitle": "Post API DELETE /deletePost/:id should delete the post",
                  "timedOut": false,
                  "duration": 61,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newPost = await Post.create({\n    userId,\n    title: 'To be deleted',\n    description: 'Delete me',\n    dateOfPost: new Date(),\n    likedByUsers: [],\n    photoUrl: ''\n});\nconst res = await chai.request(app).delete(`/deletePost/${newPost._id}`);\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('Post deleted successfully');\nexpect(res.body.user._id).to.equal(newPost._id.toString());\nconst deleted = await Post.findById(newPost._id);\nexpect(deleted).to.be.null;",
                  "err": {},
                  "uuid": "5a183803-fb1f-498c-927b-1654c12bd03d",
                  "parentUUID": "b46b75fd-3d90-4315-a56d-bd3ec6825c65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if post not found",
                  "fullTitle": "Post API DELETE /deletePost/:id should return 404 if post not found",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).delete('/deletePost/507f1f77bcf86cd799439011');\nexpect(res).to.have.status(404);\nexpect(res.body.message).to.equal('Post not found');",
                  "err": {},
                  "uuid": "b273439d-3909-4ec5-9078-a23fa4876394",
                  "parentUUID": "b46b75fd-3d90-4315-a56d-bd3ec6825c65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a183803-fb1f-498c-927b-1654c12bd03d",
                "b273439d-3909-4ec5-9078-a23fa4876394"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "40533a7b-f34e-40b0-b7af-1e70aae4a627",
              "title": "GET /postLikeStatus/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return liked: true if user liked the post",
                  "fullTitle": "Post API GET /postLikeStatus/:postId should return liked: true if user liked the post",
                  "timedOut": false,
                  "duration": 79,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const post = await Post.findById(postId);\npost.likedByUsers = [userId];\nawait post.save();\nconst res = await chai\n    .request(app)\n    .get(`/postLikeStatus/${postId}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.liked).to.be.true;",
                  "err": {},
                  "uuid": "883a8f58-3e5f-488c-8d78-a97b7b53b20f",
                  "parentUUID": "40533a7b-f34e-40b0-b7af-1e70aae4a627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return liked: false if user did not like the post",
                  "fullTitle": "Post API GET /postLikeStatus/:postId should return liked: false if user did not like the post",
                  "timedOut": false,
                  "duration": 185,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const post = await Post.findById(postId);\npost.likedByUsers = [];\nawait post.save();\nconst res = await chai\n    .request(app)\n    .get(`/postLikeStatus/${postId}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.liked).to.be.false;",
                  "err": {},
                  "uuid": "432d9324-a024-4e0a-bebe-fc0dd86964e6",
                  "parentUUID": "40533a7b-f34e-40b0-b7af-1e70aae4a627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if post not found",
                  "fullTitle": "Post API GET /postLikeStatus/:postId should return 404 if post not found",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/postLikeStatus/507f1f77bcf86cd799439011')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(404);",
                  "err": {},
                  "uuid": "0cbf1970-c182-420e-923b-f45d5ed2ce3d",
                  "parentUUID": "40533a7b-f34e-40b0-b7af-1e70aae4a627",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "883a8f58-3e5f-488c-8d78-a97b7b53b20f",
                "432d9324-a024-4e0a-bebe-fc0dd86964e6",
                "0cbf1970-c182-420e-923b-f45d5ed2ce3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 289,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "ed26c1f9-0c0d-4289-86f7-536b7e1fe2aa",
          "title": "Tag API",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\tags.test.js",
          "file": "\\test\\tags.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Tag API\"",
              "fullTitle": "Tag API \"before each\" hook in \"Tag API\"",
              "timedOut": false,
              "duration": 64,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Tag.deleteMany({});\nawait Tag.insertMany(sampleTags);",
              "err": {},
              "uuid": "56867af3-8648-4984-b12f-6b057c9222e6",
              "parentUUID": "ed26c1f9-0c0d-4289-86f7-536b7e1fe2aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Tag API\"",
              "fullTitle": "Tag API \"after each\" hook in \"Tag API\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Tag.deleteMany({});",
              "err": {},
              "uuid": "9c27d338-8a04-4830-97ed-68376204a5b8",
              "parentUUID": "ed26c1f9-0c0d-4289-86f7-536b7e1fe2aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9755887b-87b6-447b-8a54-033540703990",
              "title": "GET /api/tags",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\tags.test.js",
              "file": "\\test\\tags.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all tags",
                  "fullTitle": "Tag API GET /api/tags should return all tags",
                  "timedOut": false,
                  "duration": 65,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/api/tags');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.equal(2);\nexpect(res.body[0]).to.have.property('name');\nexpect(res.body[0]).to.have.property('name', 'Scenic');\nexpect(res.body[1]).to.have.property('name', 'Challenging');",
                  "err": {},
                  "uuid": "7a60d4af-5b76-4927-91fb-d1b3a46e2d7f",
                  "parentUUID": "9755887b-87b6-447b-8a54-033540703990",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty array when no tags exist",
                  "fullTitle": "Tag API GET /api/tags should return an empty array when no tags exist",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Tag.deleteMany({});\nconst res = await chai.request(app).get('/api/tags');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2a0e0967-d62a-4d29-abe6-d61c39dedede",
                  "parentUUID": "9755887b-87b6-447b-8a54-033540703990",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a60d4af-5b76-4927-91fb-d1b3a46e2d7f",
                "2a0e0967-d62a-4d29-abe6-d61c39dedede"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 123,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "e3215373-101b-4cd3-bbd9-c0b916f8188f",
          "title": "Trail API Test Collection",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trails.test.js",
          "file": "\\test\\trails.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get all 5 trails",
              "fullTitle": "Trail API Test Collection should get all 5 trails",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n    .get('/api/trails/getTrails')\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('array').with.lengthOf(4);\n        expect(res.body[0]).to.include.keys(\n            '_id', 'name', 'latitude', 'longitude', 'photoUrl', 'location',\n            'description', 'avgElevationM', 'difficulty', 'distanceKm', 'tags'\n        );\n        done();\n    });",
              "err": {},
              "uuid": "0a1da652-8e0e-4239-a3b3-9f2a56bdfa51",
              "parentUUID": "e3215373-101b-4cd3-bbd9-c0b916f8188f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "180bae67-f3ea-4e7c-814e-d4ac946451f2",
              "title": "POST /addTrail",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trails.test.js",
              "file": "\\test\\trails.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new trail",
                  "fullTitle": "Trail API Test Collection POST /addTrail should create a new trail",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trails/addTrail')\n    .send({\n        name: \"New Trail\",\n        distanceKm: 4.2,\n        avgElevationM: 200,\n        timeMinutes: 60,\n        location: \"Somewhere\",\n        photoUrl: \"http://example.com/new.jpg\",\n        description: \"Just testing.\",\n        latitude: 49.0,\n        longitude: -123.0,\n        tags: []\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(201);\n        expect(res.body.message).to.equal(\"Trail added successfully\");\n        expect(res.body.trail).to.include({ name: \"New Trail\" });\n        done();\n    });",
                  "err": {},
                  "uuid": "41f13008-1234-4de4-b726-051cf563cd73",
                  "parentUUID": "180bae67-f3ea-4e7c-814e-d4ac946451f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41f13008-1234-4de4-b726-051cf563cd73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b213de48-a7d4-4b1d-a850-d155b04bbf42",
              "title": "GET /getTrailById/:id",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trails.test.js",
              "file": "\\test\\trails.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fetch a trail by valid ID",
                  "fullTitle": "Trail API Test Collection GET /getTrailById/:id should fetch a trail by valid ID",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .get(`/api/trails/getTrailById/${trailId}`)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('_id', trailId);\n        expect(res.body.name).to.equal(\"Sunset Ridge Trail\");\n        done();\n    });",
                  "err": {},
                  "uuid": "d74ebe2c-7e0f-4fa8-9c49-2ff03979d902",
                  "parentUUID": "b213de48-a7d4-4b1d-a850-d155b04bbf42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for non-existing ID",
                  "fullTitle": "Trail API Test Collection GET /getTrailById/:id should return 404 for non-existing ID",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeId = new mongoose.Types.ObjectId();\nchai.request(server)\n    .get(`/api/trails/getTrailById/${fakeId}`)\n    .end((err, res) => {\n        expect(res).to.have.status(404);\n        expect(res.body.message).to.equal('Trail not found');\n        done();\n    });",
                  "err": {},
                  "uuid": "5e4580c8-525c-49a7-b51d-c4cf6a1d2a0b",
                  "parentUUID": "b213de48-a7d4-4b1d-a850-d155b04bbf42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d74ebe2c-7e0f-4fa8-9c49-2ff03979d902",
                "5e4580c8-525c-49a7-b51d-c4cf6a1d2a0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [
            "0a1da652-8e0e-4239-a3b3-9f2a56bdfa51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 167,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "4bc66bb7-ab7c-49f4-ad0e-fc2510a47952",
          "title": "Trip API Routes",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
          "file": "\\test\\trip.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Trip API Routes\"",
              "fullTitle": "Trip API Routes \"before each\" hook in \"Trip API Routes\"",
              "timedOut": false,
              "duration": 957,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Trail.deleteMany({});\nawait Trip.deleteMany({});\nuser = await User.create({ username: 'testuser', email: 'test@example.com', password: 'testpassword123' });\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret', { expiresIn: '1h' });\ntrail = await Trail.create(sampleTrail);",
              "err": {},
              "uuid": "ccdb93cb-8de0-4052-805c-6806db7d1f4e",
              "parentUUID": "4bc66bb7-ab7c-49f4-ad0e-fc2510a47952",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Trip API Routes\"",
              "fullTitle": "Trip API Routes \"after each\" hook in \"Trip API Routes\"",
              "timedOut": false,
              "duration": 68,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Trail.deleteMany({});\nawait Trip.deleteMany({});",
              "err": {},
              "uuid": "7aa12c9a-d8d6-4083-b7b0-9a6016a24023",
              "parentUUID": "4bc66bb7-ab7c-49f4-ad0e-fc2510a47952",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1d6e113b-aefc-4788-9b2c-7c6123f76327",
              "title": "POST /save",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save a new trip with status \"Upcoming\"",
                  "fullTitle": "Trip API Routes POST /save should save a new trip with status \"Upcoming\"",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trips/save')\n    .set('Cookie', `token=${token}`)\n    .send({\n        trailID: trail._id,\n        startDate: new Date(),\n        endDate: new Date(),\n        time: 100\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(201);\n        expect(res.body.message).to.equal('Trip saved successfully!');\n        expect(res.body.trip.status).to.equal('Upcoming');\n        done();\n    });",
                  "err": {},
                  "uuid": "bb71d7ae-33ca-420f-9656-00d3f958f931",
                  "parentUUID": "1d6e113b-aefc-4788-9b2c-7c6123f76327",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error when required fields are missing",
                  "fullTitle": "Trip API Routes POST /save should return error when required fields are missing",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trips/save')\n    .set('Cookie', `token=${token}`)\n    .send({\n        trailID: trail._id,\n        startDate: new Date(),\n        time: 100\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body.success).to.equal(false);\n        expect(res.body.message).to.equal('Trail ID, start date, end date, and time are required');\n        done();\n    });",
                  "err": {},
                  "uuid": "457d48ea-9e02-434e-95d4-b097bb9f8d34",
                  "parentUUID": "1d6e113b-aefc-4788-9b2c-7c6123f76327",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb71d7ae-33ca-420f-9656-00d3f958f931",
                "457d48ea-9e02-434e-95d4-b097bb9f8d34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "0b7a893e-22ee-459c-ab81-c2a4912eacd2",
              "title": "POST /start",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start a new trip with status \"In Progress\"",
                  "fullTitle": "Trip API Routes POST /start should start a new trip with status \"In Progress\"",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trips/start')\n    .set('Cookie', `token=${token}`)\n    .send({\n        trailID: trail._id,\n        startDate: new Date(),\n        endDate: new Date(),\n        time: 100\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(201);\n        expect(res.body.message).to.equal('Trip started successfully!');\n        expect(res.body.trip.status).to.equal('In Progress');\n        done();\n    });",
                  "err": {},
                  "uuid": "ef5aad50-41d9-4dc9-a3ba-11f0009d8609",
                  "parentUUID": "0b7a893e-22ee-459c-ab81-c2a4912eacd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if the trip has no required fields",
                  "fullTitle": "Trip API Routes POST /start should return error if the trip has no required fields",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trips/start')\n    .set('Cookie', `token=${token}`)\n    .send({\n        trailID: trail._id,\n        startDate: new Date(),\n        time: 100\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body.success).to.equal(false);\n        expect(res.body.message).to.equal('Trail ID, start date, end date, and time are required');\n        done();\n    });",
                  "err": {},
                  "uuid": "2b7db549-4629-4af3-b71d-d764cc9b6597",
                  "parentUUID": "0b7a893e-22ee-459c-ab81-c2a4912eacd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef5aad50-41d9-4dc9-a3ba-11f0009d8609",
                "2b7db549-4629-4af3-b71d-d764cc9b6597"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 96,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "2a78cfd6-b9d6-44f9-8fae-7ece941ef672",
              "title": "GET /",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve all user trips",
                  "fullTitle": "Trip API Routes GET / should retrieve all user trips",
                  "timedOut": false,
                  "duration": 120,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Trip.create({ userId: user._id, trailID: trail._id, startDate: new Date(), endDate: new Date(), time: 60, status: 'Upcoming' });\nconst res = await chai.request(server)\n    .get('/api/trips/')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.success).to.be.true;\nexpect(res.body.trips).to.be.an('array').with.lengthOf(1);",
                  "err": {},
                  "uuid": "a2de385f-8bf8-4ef0-a543-9646a17adfde",
                  "parentUUID": "2a78cfd6-b9d6-44f9-8fae-7ece941ef672",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty array if the user has no trips",
                  "fullTitle": "Trip API Routes GET / should return an empty array if the user has no trips",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .get('/api/trips/')\n    .set('Cookie', `token=${token}`)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body.success).to.be.true;\n        expect(res.body.trips).to.be.an('array').that.is.empty;\n        done();\n    });",
                  "err": {},
                  "uuid": "c82ffb71-023a-4c12-abc5-b77fd3c628c7",
                  "parentUUID": "2a78cfd6-b9d6-44f9-8fae-7ece941ef672",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2de385f-8bf8-4ef0-a543-9646a17adfde",
                "c82ffb71-023a-4c12-abc5-b77fd3c628c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "01dd6733-f8cd-4e59-ad39-19e119d1a54f",
              "title": "PUT /updateStatus/:tripId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update the trip status",
                  "fullTitle": "Trip API Routes PUT /updateStatus/:tripId should update the trip status",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trip = await Trip.create({ userId: user._id, trailID: trail._id, startDate: new Date(), endDate: new Date(), time: 60, status: 'Upcoming' });\nconst res = await chai.request(server)\n    .put(`/api/trips/updateStatus/${trip._id}`)\n    .set('Cookie', `token=${token}`)\n    .send({ status: 'Completed' });\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('Trip status updated successfully');\nexpect(res.body.trip.status).to.equal('Completed');",
                  "err": {},
                  "uuid": "5c9c8c01-edcf-4d2f-bd13-64b5a65fd865",
                  "parentUUID": "01dd6733-f8cd-4e59-ad39-19e119d1a54f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error if status is invalid",
                  "fullTitle": "Trip API Routes PUT /updateStatus/:tripId should return an error if status is invalid",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trip = await Trip.create({ userId: user._id, trailID: trail._id, startDate: new Date(), endDate: new Date(), time: 60, status: 'Upcoming' });\nconst res = await chai.request(server)\n    .put(`/api/trips/updateStatus/${trip._id}`)\n    .set('Cookie', `token=${token}`)\n    .send({ status: 'InvalidStatus' });\nexpect(res).to.have.status(400);\nexpect(res.body.message).to.equal('Invalid status. Must be Upcoming, In Progress, or Completed');",
                  "err": {},
                  "uuid": "3914cdf3-1bfa-4e70-b209-d01d0bd634a8",
                  "parentUUID": "01dd6733-f8cd-4e59-ad39-19e119d1a54f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c9c8c01-edcf-4d2f-bd13-64b5a65fd865",
                "3914cdf3-1bfa-4e70-b209-d01d0bd634a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 192,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "ebfc189a-d7a6-41f4-9b53-5c734ce46121",
              "title": "DELETE /delete/:tripId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a user's trip",
                  "fullTitle": "Trip API Routes DELETE /delete/:tripId should delete a user's trip",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trip = await Trip.create({ userId: user._id, trailID: trail._id, startDate: new Date(), endDate: new Date(), time: 60, status: 'Upcoming' });\nconst res = await chai.request(server)\n    .delete(`/api/trips/delete/${trip._id}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('Trip deleted successfully');",
                  "err": {},
                  "uuid": "d94adf60-3338-453f-89f2-998cc4278922",
                  "parentUUID": "ebfc189a-d7a6-41f4-9b53-5c734ce46121",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if trip not found",
                  "fullTitle": "Trip API Routes DELETE /delete/:tripId should return error if trip not found",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(server)\n    .delete('/api/trips/delete/60d7e14f7c411e6348f9f71d')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(404);\nexpect(res.body.message).to.equal('Trip not found or not authorized');",
                  "err": {},
                  "uuid": "452d0ee4-6df0-4b71-85f3-9751134ca73a",
                  "parentUUID": "ebfc189a-d7a6-41f4-9b53-5c734ce46121",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d94adf60-3338-453f-89f2-998cc4278922",
                "452d0ee4-6df0-4b71-85f3-9751134ca73a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c12f0d67-d655-4f22-ac5a-43b444d2793e",
          "title": "User API",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
          "file": "\\test\\user.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User API\"",
              "fullTitle": "User API \"before all\" hook in \"User API\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});",
              "err": {},
              "uuid": "179becf0-105c-4deb-a18f-b4a0cabb96d1",
              "parentUUID": "c12f0d67-d655-4f22-ac5a-43b444d2793e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User API\"",
              "fullTitle": "User API \"after each\" hook in \"User API\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\ntoken = null;\nuserId = null;",
              "err": {},
              "uuid": "3b682688-dc23-41a2-92ba-c6e8f280dd0b",
              "parentUUID": "c12f0d67-d655-4f22-ac5a-43b444d2793e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "34c39c32-fd38-4ff1-886c-2552beea424b",
              "title": "POST /register/auth",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user and return token cookie",
                  "fullTitle": "User API POST /register/auth should register a new user and return token cookie",
                  "timedOut": false,
                  "duration": 883,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/register/auth')\n    .send({ email: 'test@example.com', password: 'password123' });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('success', true);\nexpect(res.body).to.have.property('user', 'test@example.com');\nexpect(res).to.have.cookie('token');\nconst user = await User.findOne({ email: 'test@example.com' });\nexpect(user).to.exist;\nuserId = user._id;",
                  "err": {},
                  "uuid": "866de64f-d0f5-453e-af2e-5f19b0833f74",
                  "parentUUID": "34c39c32-fd38-4ff1-886c-2552beea424b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register without email or password",
                  "fullTitle": "User API POST /register/auth should not register without email or password",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/register/auth')\n    .send({ email: '' });\nexpect(res).to.have.status(400);\nexpect(res.body).to.have.property('success', false);\nexpect(res.body.message).to.equal('Email and password are required');",
                  "err": {},
                  "uuid": "b13a6149-2f79-46b0-9059-202d6a950c5c",
                  "parentUUID": "34c39c32-fd38-4ff1-886c-2552beea424b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register duplicate email",
                  "fullTitle": "User API POST /register/auth should not register duplicate email",
                  "timedOut": false,
                  "duration": 810,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.create({ email: 'dup@example.com', password: 'password123' });\nconst res = await chai.request(app)\n    .post('/api/users/register/auth')\n    .send({ email: 'dup@example.com', password: 'password123' });\nexpect(res).to.have.status(500);\nexpect(res.body).to.have.property('success', false);\nexpect(res.body.error).to.include('Email already registered');",
                  "err": {},
                  "uuid": "da46f301-4ea9-4590-b0be-d0c7338e1729",
                  "parentUUID": "34c39c32-fd38-4ff1-886c-2552beea424b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "866de64f-d0f5-453e-af2e-5f19b0833f74",
                "b13a6149-2f79-46b0-9059-202d6a950c5c",
                "da46f301-4ea9-4590-b0be-d0c7338e1729"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1701,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "13109313-9901-46d8-be9d-2a2520438cc5",
              "title": "POST /login/auth",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /login/auth\"",
                  "fullTitle": "User API POST /login/auth \"before each\" hook in \"POST /login/auth\"",
                  "timedOut": false,
                  "duration": 472,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = new User({ email: 'login@example.com', password: 'password123' });\nawait user.save();",
                  "err": {},
                  "uuid": "de2366fd-cb12-4e9b-90b2-1059ef6fbb91",
                  "parentUUID": "13109313-9901-46d8-be9d-2a2520438cc5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login with correct credentials and set token cookie",
                  "fullTitle": "User API POST /login/auth should login with correct credentials and set token cookie",
                  "timedOut": false,
                  "duration": 523,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/login/auth')\n    .send({ email: 'login@example.com', password: 'password123' });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('success', true);\nexpect(res.body.message).to.equal('Login successful');\nexpect(res.body.user).to.have.property('email', 'login@example.com');\nexpect(res).to.have.cookie('token');\ntoken = res.header['set-cookie'][0];",
                  "err": {},
                  "uuid": "f605547b-9224-4d3f-9f9e-3a5dcb36dcca",
                  "parentUUID": "13109313-9901-46d8-be9d-2a2520438cc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail login with invalid credentials",
                  "fullTitle": "User API POST /login/auth should fail login with invalid credentials",
                  "timedOut": false,
                  "duration": 514,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/login/auth')\n    .send({ email: 'login@example.com', password: 'wrongpass' });\nexpect(res).to.have.status(401);\nexpect(res.body).to.have.property('success', false);\nexpect(res.body.message).to.equal('Invalid credentials');",
                  "err": {},
                  "uuid": "5f5889c8-c92d-469b-a11d-c938c9c5ef26",
                  "parentUUID": "13109313-9901-46d8-be9d-2a2520438cc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail login with non-existing user",
                  "fullTitle": "User API POST /login/auth should fail login with non-existing user",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/login/auth')\n    .send({ email: 'nouser@example.com', password: 'password123' });\nexpect(res).to.have.status(401);\nexpect(res.body).to.have.property('success', false);\nexpect(res.body.message).to.equal('Invalid credentials');",
                  "err": {},
                  "uuid": "7fa1b62c-9dd4-48e8-89ad-fc89e33f280f",
                  "parentUUID": "13109313-9901-46d8-be9d-2a2520438cc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f605547b-9224-4d3f-9f9e-3a5dcb36dcca",
                "5f5889c8-c92d-469b-a11d-c938c9c5ef26",
                "7fa1b62c-9dd4-48e8-89ad-fc89e33f280f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1060,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b334d7a4-14fc-4468-9a85-61b1fe45cd81",
              "title": "GET /me",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /me\"",
                  "fullTitle": "User API GET /me \"before each\" hook in \"GET /me\"",
                  "timedOut": false,
                  "duration": 455,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = new User({ email: 'me@example.com', password: 'password123' });\nawait user.save();\nuserId = user._id;\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret');",
                  "err": {},
                  "uuid": "d75015d3-d67d-463d-b2ae-5688095006a8",
                  "parentUUID": "b334d7a4-14fc-4468-9a85-61b1fe45cd81",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get current user info with valid token",
                  "fullTitle": "User API GET /me should get current user info with valid token",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .get('/api/users/me')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('email', 'me@example.com');\nexpect(res.body).to.not.have.property('password');",
                  "err": {},
                  "uuid": "1a0eca8d-5c97-4ac3-9019-0beb6ed477d3",
                  "parentUUID": "b334d7a4-14fc-4468-9a85-61b1fe45cd81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if user does not exist",
                  "fullTitle": "User API GET /me should return 404 if user does not exist",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeId = new mongoose.Types.ObjectId();\nconst fakeToken = jwt.sign({ id: fakeId, email: 'fake@example.com' }, process.env.JWT_SECRET || 'testsecret');\nconst res = await chai.request(app)\n    .get('/api/users/me')\n    .set('Cookie', `token=${fakeToken}`);\nexpect(res).to.have.status(404);\nexpect(res.body.message).to.equal('User not found');",
                  "err": {},
                  "uuid": "278ad5dd-9032-4db9-9535-bf3cef580e5b",
                  "parentUUID": "b334d7a4-14fc-4468-9a85-61b1fe45cd81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 if no token provided",
                  "fullTitle": "User API GET /me should return 401 if no token provided",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/api/users/me');\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "38f4f57d-8395-45e8-9f3f-dd9e54edb9f0",
                  "parentUUID": "b334d7a4-14fc-4468-9a85-61b1fe45cd81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a0eca8d-5c97-4ac3-9019-0beb6ed477d3",
                "278ad5dd-9032-4db9-9535-bf3cef580e5b",
                "38f4f57d-8395-45e8-9f3f-dd9e54edb9f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "ab1781a9-452d-4305-8bb0-34ac5addadea",
              "title": "POST /register/setup",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /register/setup\"",
                  "fullTitle": "User API POST /register/setup \"before each\" hook in \"POST /register/setup\"",
                  "timedOut": false,
                  "duration": 422,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = new User({ email: 'setup@example.com', password: 'password123' });\nawait user.save();\nuserId = user._id;\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret');",
                  "err": {},
                  "uuid": "90568d94-3807-4240-9d53-d41817f1c3e0",
                  "parentUUID": "ab1781a9-452d-4305-8bb0-34ac5addadea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update user profile and mark profileCompleted",
                  "fullTitle": "User API POST /register/setup should update user profile and mark profileCompleted",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const profileData = {\n    firstName: 'John',\n    lastName: 'Doe',\n    badge: 'Intermediate',\n    gender: 'male',\n    nickname: 'JD',\n    country: 'USA',\n    gear: [{ category: 'Clothing', item: 'Jacket' }],\n    visibility: 'private'\n};\nconst res = await chai.request(app)\n    .post('/api/users/register/setup')\n    .set('Cookie', `token=${token}`)\n    .send(profileData);\nexpect(res).to.have.status(200);\nexpect(res.body.success).to.be.true;\nconsole.log(res.body.user)\nconst resUser = res.body.user;\nexpect(resUser.firstName).to.equal(profileData.firstName);\nexpect(resUser.lastName).to.equal(profileData.lastName);\nexpect(resUser.badge).to.equal(profileData.badge);\nexpect(resUser.gender).to.equal(profileData.gender);\nexpect(resUser.nickname).to.equal(profileData.nickname);\nexpect(resUser.country).to.equal(profileData.country);\nexpect(resUser.visibility).to.equal(profileData.visibility);\nexpect(res.body.user.gear.length).to.deep.equal(profileData.gear.length);\nexpect(res.body.user.profileCompleted).to.be.true;",
                  "err": {},
                  "uuid": "d566515b-fbd4-4bd2-83bc-d1964ad83765",
                  "parentUUID": "ab1781a9-452d-4305-8bb0-34ac5addadea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if user not found",
                  "fullTitle": "User API POST /register/setup should return 500 if user not found",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeToken = jwt.sign({ id: new mongoose.Types.ObjectId(), email: 'fake@example.com' }, process.env.JWT_SECRET || 'testsecret');\nconst res = await chai.request(app)\n    .post('/api/users/register/setup')\n    .set('Cookie', `token=${fakeToken}`)\n    .send({ firstName: 'Jane' });\nexpect(res).to.have.status(500);\nexpect(res.body.success).to.be.false;\nexpect(res.body.message).to.equal('User not found');",
                  "err": {},
                  "uuid": "3118aff4-a2ee-4018-9d44-e321b82f31c0",
                  "parentUUID": "ab1781a9-452d-4305-8bb0-34ac5addadea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d566515b-fbd4-4bd2-83bc-d1964ad83765",
                "3118aff4-a2ee-4018-9d44-e321b82f31c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 72,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "cdc2f559-ac49-418c-925c-95dc37a5a843",
              "title": "POST /logout",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should clear token cookie and logout successfully",
                  "fullTitle": "User API POST /logout should clear token cookie and logout successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/api/users/logout');\nexpect(res).to.have.status(200);\nexpect(res.body.success).to.be.true;\nexpect(res.body.message).to.equal('Logged out successfully');\nexpect(res.header['set-cookie'][0]).to.include('token=;'); // cleared cookie",
                  "err": {},
                  "uuid": "c4924f34-6990-4b7c-86c5-6ae9069b12c5",
                  "parentUUID": "cdc2f559-ac49-418c-925c-95dc37a5a843",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4924f34-6990-4b7c-86c5-6ae9069b12c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "d3901f75-867e-44a6-aa41-5bfa156d2f27",
              "title": "POST /update/gear",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /update/gear\"",
                  "fullTitle": "User API POST /update/gear \"before each\" hook in \"POST /update/gear\"",
                  "timedOut": false,
                  "duration": 413,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = new User({ email: 'gear@example.com', password: 'password123' });\nawait user.save();\nuserId = user._id;\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret');",
                  "err": {},
                  "uuid": "9247789a-05f3-4fec-b7db-49fe628ff5e7",
                  "parentUUID": "d3901f75-867e-44a6-aa41-5bfa156d2f27",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update user gear with valid token",
                  "fullTitle": "User API POST /update/gear should update user gear with valid token",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const gearData = [{ category: 'Electronics', item: 'GPS' }, { category: 'Clothing', item: 'Hat' }];\nconst res = await chai.request(app)\n    .post('/api/users/update/gear')\n    .set('Cookie', `token=${token}`)\n    .send({ gear: gearData });\nexpect(res).to.have.status(200);\nexpect(res.body.success).to.be.true;\nexpect(res.body.message).to.equal('Gear updated successfully');\nconsole.log(res.body.user.gear)\nconst returnedGear = res.body.user.gear.map(({ category, item }) => ({ category, item }));\nexpect(returnedGear).to.deep.equal(gearData);\n// expect(res.body.user.gear).to.deep.equal(gearData);",
                  "err": {},
                  "uuid": "26c7abd6-75f9-41fb-87eb-4a6781d40d8a",
                  "parentUUID": "d3901f75-867e-44a6-aa41-5bfa156d2f27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if user not found",
                  "fullTitle": "User API POST /update/gear should return 404 if user not found",
                  "timedOut": false,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeToken = jwt.sign({ id: new mongoose.Types.ObjectId(), email: 'fake@example.com' }, process.env.JWT_SECRET || 'testsecret');\nconst res = await chai.request(app)\n    .post('/api/users/update/gear')\n    .set('Cookie', `token=${fakeToken}`)\n    .send({ gear: [] });\nexpect(res).to.have.status(404);\nexpect(res.body.success).to.be.false;\nexpect(res.body.message).to.equal('User not found');",
                  "err": {},
                  "uuid": "3929520f-91f2-4c14-96f4-1457c5058d34",
                  "parentUUID": "d3901f75-867e-44a6-aa41-5bfa156d2f27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 if no token provided",
                  "fullTitle": "User API POST /update/gear should return 401 if no token provided",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/update/gear')\n    .send({ gear: [] });\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "a4e21df7-d2e1-4ce3-bfa3-8bcc3f37cc33",
                  "parentUUID": "d3901f75-867e-44a6-aa41-5bfa156d2f27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26c7abd6-75f9-41fb-87eb-4a6781d40d8a",
                "3929520f-91f2-4c14-96f4-1457c5058d34",
                "a4e21df7-d2e1-4ce3-bfa3-8bcc3f37cc33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 91,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}