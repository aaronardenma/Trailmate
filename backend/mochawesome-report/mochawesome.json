{
  "stats": {
    "suites": 36,
    "tests": 66,
    "passes": 66,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-07T05:08:28.201Z",
    "end": "2025-07-07T05:09:29.343Z",
    "duration": 61142,
    "testsRegistered": 66,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a63fa46a-39db-4a79-8f89-964eb32c636e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 63,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await Trails.deleteMany({});\nconst inserted = await Trails.insertMany(sampleTrails);\ntrailId = inserted[0]._id.toString();",
          "err": {},
          "uuid": "431ebaab-edfa-486d-950b-6b060e6c6dc1",
          "parentUUID": "a63fa46a-39db-4a79-8f89-964eb32c636e",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 32,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "await Trails.deleteMany({});",
          "err": {},
          "uuid": "cd787b77-fa8f-4fd9-9b58-c10c1ec5db2e",
          "parentUUID": "a63fa46a-39db-4a79-8f89-964eb32c636e",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "abeafacf-d337-458c-866a-4f2439a0f235",
          "title": "Comment API Routes",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\comment.test.js",
          "file": "\\test\\comment.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Comment API Routes\"",
              "fullTitle": "Comment API Routes \"before each\" hook in \"Comment API Routes\"",
              "timedOut": false,
              "duration": 531,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Post.deleteMany({});\nawait Comment.deleteMany({});\nuser = await User.create({\n    firstName: 'Test',\n    lastName: 'User',\n    email: 'test@example.com',\n    password: 'password123'\n});\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret', { expiresIn: '1h' });\npost = await Post.create({\n    userId: user._id,\n    title: 'Test Post',\n    description: 'Post description',\n    photoUrl: '',\n    likes: 0,\n    likedByUsers: []\n});",
              "err": {},
              "uuid": "6184592d-9199-4945-9bc9-e75c1d10332d",
              "parentUUID": "abeafacf-d337-458c-866a-4f2439a0f235",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Comment API Routes\"",
              "fullTitle": "Comment API Routes \"after each\" hook in \"Comment API Routes\"",
              "timedOut": false,
              "duration": 109,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Post.deleteMany({});\nawait Comment.deleteMany({});",
              "err": {},
              "uuid": "db099e3c-b066-447e-95d8-002f6774a428",
              "parentUUID": "abeafacf-d337-458c-866a-4f2439a0f235",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "43118cc4-359e-4575-bb82-97d93d880107",
              "title": "POST /api/comments/add/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\comment.test.js",
              "file": "\\test\\comment.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully add a comment to a post",
                  "fullTitle": "Comment API Routes POST /api/comments/add/:postId should successfully add a comment to a post",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const commentText = 'This is a test comment';\nconst res = await chai\n    .request(app)\n    .post(`/api/comments/add/${post._id}`)\n    .set('Cookie', `token=${token}`)\n    .send({ comment: commentText });\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property('message', 'Comment added successfully');\nexpect(res.body.comment).to.include({\n    comment: commentText,\n    postID: post._id.toString(),\n    userID: user._id.toString(),\n});",
                  "err": {},
                  "uuid": "c8390c8e-1769-4c89-babf-d15bfe652274",
                  "parentUUID": "43118cc4-359e-4575-bb82-97d93d880107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail without a valid token",
                  "fullTitle": "Comment API Routes POST /api/comments/add/:postId should fail without a valid token",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .post(`/api/comments/add/${post._id}`)\n    .send({ comment: 'No token comment' });\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "8e26171c-7e56-4ad5-bae4-1fb922f7a859",
                  "parentUUID": "43118cc4-359e-4575-bb82-97d93d880107",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for empty comment",
                  "fullTitle": "Comment API Routes POST /api/comments/add/:postId should return 400 for empty comment",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .post(`/api/comments/add/${post._id}`)\n    .set('Cookie', `token=${token}`)\n    .send({ comment: '' });\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "d7e686d8-f87d-4f67-81b5-d11d93e10bcb",
                  "parentUUID": "43118cc4-359e-4575-bb82-97d93d880107",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8390c8e-1769-4c89-babf-d15bfe652274",
                "8e26171c-7e56-4ad5-bae4-1fb922f7a859",
                "d7e686d8-f87d-4f67-81b5-d11d93e10bcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 144,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "6a13e8fa-8127-4714-b676-7e7617421925",
              "title": "GET /api/comments/post/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\comment.test.js",
              "file": "\\test\\comment.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve comments for a post",
                  "fullTitle": "Comment API Routes GET /api/comments/post/:postId should retrieve comments for a post",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Comment.create({\n    userID: user._id,\n    postID: post._id,\n    comment: 'Nice post!'\n});\nconst res = await chai\n    .request(app)\n    .get(`/api/comments/post/${post._id}`);\nexpect(res).to.have.status(200);\nexpect(res.body.comments).to.be.an('array');\nexpect(res.body.comments[0]).to.have.property('comment', 'Nice post!');",
                  "err": {},
                  "uuid": "24e3ede6-ea21-4d19-b49a-437d867e03d8",
                  "parentUUID": "6a13e8fa-8127-4714-b676-7e7617421925",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid post ID format",
                  "fullTitle": "Comment API Routes GET /api/comments/post/:postId should return 400 for invalid post ID format",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get(`/api/comments/post/invalid123`);\nexpect(res).to.have.status(400);\nexpect(res.body).to.have.property('error', 'Invalid post ID format');",
                  "err": {},
                  "uuid": "f67c1e03-4a34-4a5b-9f0a-77160b171aaa",
                  "parentUUID": "6a13e8fa-8127-4714-b676-7e7617421925",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return empty array if no comments exist",
                  "fullTitle": "Comment API Routes GET /api/comments/post/:postId should return empty array if no comments exist",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get(`/api/comments/post/${post._id}`);\nexpect(res).to.have.status(200);\nexpect(res.body.comments).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "84165b6c-c446-43a3-8928-85d5aa95a888",
                  "parentUUID": "6a13e8fa-8127-4714-b676-7e7617421925",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "24e3ede6-ea21-4d19-b49a-437d867e03d8",
                "f67c1e03-4a34-4a5b-9f0a-77160b171aaa",
                "84165b6c-c446-43a3-8928-85d5aa95a888"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 165,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "f2537ba3-69e0-4deb-9397-ad200133d428",
          "title": "Favorite API Routes",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
          "file": "\\test\\favorite.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Favorite API Routes\"",
              "fullTitle": "Favorite API Routes \"before each\" hook in \"Favorite API Routes\"",
              "timedOut": false,
              "duration": 762,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Favorite.deleteMany({});\nawait User.deleteMany({});\nuser = await User.create({\n    firstName: 'Test',\n    lastName: 'User',\n    email: 'favorite@example.com',\n    password: 'password123'\n});\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret', { expiresIn: '1h' });\ntrail = await Trail.create( {\n    name: \"Oceanview Path\",\n    latitude: 49.2700,\n    longitude: -123.1250,\n    photoUrl: \"https://example.com/trails/oceanview.jpg\",\n    location: \"Burnaby\",\n    description: \"Moderate trail with breathtaking views of the ocean.\",\n    avgElevationM: 280,\n    difficulty: \"Moderate\",\n    distanceKm: 6.1,\n    tags: []\n})\ntrailID = trail._id",
              "err": {},
              "uuid": "e7e84c48-fd73-4075-b9bc-fc7b39d98f23",
              "parentUUID": "f2537ba3-69e0-4deb-9397-ad200133d428",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Favorite API Routes\"",
              "fullTitle": "Favorite API Routes \"after each\" hook in \"Favorite API Routes\"",
              "timedOut": false,
              "duration": 111,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Favorite.deleteMany({});\nawait User.deleteMany({});\nawait Trail.deleteMany({});",
              "err": {},
              "uuid": "a1d86ce1-36ad-4888-879d-8c2e15c0feee",
              "parentUUID": "f2537ba3-69e0-4deb-9397-ad200133d428",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8ab1517a-f923-4de5-b80b-26a7218b9764",
              "title": "POST /api/favorites/addFavorite",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
              "file": "\\test\\favorite.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should add a trail to favorites",
                  "fullTitle": "Favorite API Routes POST /api/favorites/addFavorite should add a trail to favorites",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/favorite/addFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(201);\nconsole.log(res.body.message)\nexpect(res.body).to.have.property('message', 'Favorite added successfully');",
                  "err": {},
                  "uuid": "e75533b7-b684-48b4-b6a3-8d88b2f65151",
                  "parentUUID": "8ab1517a-f923-4de5-b80b-26a7218b9764",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if trailID is missing",
                  "fullTitle": "Favorite API Routes POST /api/favorites/addFavorite should return 400 if trailID is missing",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/favorite/addFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({});\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "3992158a-4be7-4b15-90e3-2c5ba7801635",
                  "parentUUID": "8ab1517a-f923-4de5-b80b-26a7218b9764",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if trail already exists in favorites",
                  "fullTitle": "Favorite API Routes POST /api/favorites/addFavorite should return 409 if trail already exists in favorites",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Favorite.create({ userId: user._id, trailID });\nconst res = await chai.request(app)\n    .post('/api/favorite/addFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(409);",
                  "err": {},
                  "uuid": "4f12bff8-33ec-45ed-a783-f5ecb4b6ddcb",
                  "parentUUID": "8ab1517a-f923-4de5-b80b-26a7218b9764",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e75533b7-b684-48b4-b6a3-8d88b2f65151",
                "3992158a-4be7-4b15-90e3-2c5ba7801635",
                "4f12bff8-33ec-45ed-a783-f5ecb4b6ddcb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 185,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b3b5b3ee-7e81-4946-a50f-c06c91d723fe",
              "title": "GET /api/favorites/getFavoriteTrails",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
              "file": "\\test\\favorite.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return favorite trails for the user",
                  "fullTitle": "Favorite API Routes GET /api/favorites/getFavoriteTrails should return favorite trails for the user",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Favorite.create({ userId: user._id, trailID });\nconst res = await chai.request(app)\n    .get('/api/favorite/getFavoriteTrails')\n    .set('Cookie', `token=${token}`)\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body[0].trailID.toString()).to.equal(trailID.toString());",
                  "err": {},
                  "uuid": "313ed3c6-5dcb-4086-b879-32557f658be6",
                  "parentUUID": "b3b5b3ee-7e81-4946-a50f-c06c91d723fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "313ed3c6-5dcb-4086-b879-32557f658be6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 75,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "bda5aaa3-b8b0-4dbc-b122-ea08d0aaacff",
              "title": "POST /api/favorites/isFavorite",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
              "file": "\\test\\favorite.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return true if trail is favorited",
                  "fullTitle": "Favorite API Routes POST /api/favorites/isFavorite should return true if trail is favorited",
                  "timedOut": false,
                  "duration": 84,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Favorite.create({ userId: user._id, trailID });\nconst res = await chai.request(app)\n    .post('/api/favorite/isFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('isFavorite', true);",
                  "err": {},
                  "uuid": "60c0280a-abf5-428e-b3c3-0ca7370302bf",
                  "parentUUID": "bda5aaa3-b8b0-4dbc-b122-ea08d0aaacff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return false if trail is not favorited",
                  "fullTitle": "Favorite API Routes POST /api/favorites/isFavorite should return false if trail is not favorited",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/favorite/isFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID: trailID });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('isFavorite', false);",
                  "err": {},
                  "uuid": "b4f5d34f-a6c3-44ad-bd07-c8f1021cea71",
                  "parentUUID": "bda5aaa3-b8b0-4dbc-b122-ea08d0aaacff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if trailID is missing",
                  "fullTitle": "Favorite API Routes POST /api/favorites/isFavorite should return 400 if trailID is missing",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/favorite/isFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({});\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "480ebc92-5a5e-41fe-bd45-e0a9fa57fcb5",
                  "parentUUID": "bda5aaa3-b8b0-4dbc-b122-ea08d0aaacff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60c0280a-abf5-428e-b3c3-0ca7370302bf",
                "b4f5d34f-a6c3-44ad-bd07-c8f1021cea71",
                "480ebc92-5a5e-41fe-bd45-e0a9fa57fcb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "0d3e119f-8599-4163-8830-6ca94d9def18",
              "title": "DELETE /api/favorites/deleteFavorite",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\favorite.test.js",
              "file": "\\test\\favorite.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should remove a favorite trail",
                  "fullTitle": "Favorite API Routes DELETE /api/favorites/deleteFavorite should remove a favorite trail",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Favorite.create({ userId: user._id, trailID });\nconst res = await chai.request(app)\n    .delete('/api/favorite/deleteFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('message', 'Favorite removed successfully');",
                  "err": {},
                  "uuid": "769305bb-4e0c-4c4f-bed4-71a8fe73dd70",
                  "parentUUID": "0d3e119f-8599-4163-8830-6ca94d9def18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if trail is not found",
                  "fullTitle": "Favorite API Routes DELETE /api/favorites/deleteFavorite should return 404 if trail is not found",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .delete('/api/favorite/deleteFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({ trailID });\nexpect(res).to.have.status(404);",
                  "err": {},
                  "uuid": "1d684af9-21fe-426e-845b-60944b11e549",
                  "parentUUID": "0d3e119f-8599-4163-8830-6ca94d9def18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if trailID is missing",
                  "fullTitle": "Favorite API Routes DELETE /api/favorites/deleteFavorite should return 400 if trailID is missing",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .delete('/api/favorite/deleteFavorite')\n    .set('Cookie', `token=${token}`)\n    .send({});\nexpect(res).to.have.status(400);",
                  "err": {},
                  "uuid": "0766e70c-b467-49a4-ad68-b3cbdd46ca1d",
                  "parentUUID": "0d3e119f-8599-4163-8830-6ca94d9def18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "769305bb-4e0c-4c4f-bed4-71a8fe73dd70",
                "1d684af9-21fe-426e-845b-60944b11e549",
                "0766e70c-b467-49a4-ad68-b3cbdd46ca1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 153,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a2e4e601-1089-479d-a7c0-77f9efa3cb97",
          "title": "Gear API Routes",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\gear.test.js",
          "file": "\\test\\gear.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Gear API Routes\"",
              "fullTitle": "Gear API Routes \"before each\" hook in \"Gear API Routes\"",
              "timedOut": false,
              "duration": 89,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Gear.deleteMany({});\nawait Gear.insertMany(sampleGear);",
              "err": {},
              "uuid": "eedca98c-e436-47c0-a4f2-ab1e162eb769",
              "parentUUID": "a2e4e601-1089-479d-a7c0-77f9efa3cb97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Gear API Routes\"",
              "fullTitle": "Gear API Routes \"after each\" hook in \"Gear API Routes\"",
              "timedOut": false,
              "duration": 30,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Gear.deleteMany({});",
              "err": {},
              "uuid": "3d42a68e-046f-47e3-b467-bd4d0bfd51ac",
              "parentUUID": "a2e4e601-1089-479d-a7c0-77f9efa3cb97",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all gear items",
              "fullTitle": "Gear API Routes should return all gear items",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(app)\n    .get('/api/gear')\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('array');\n        expect(res.body.length).to.equal(2);\n        console.log(res.body[0])\n        expect(res.body[0]).to.have.property('category');\n        expect(res.body[0]).to.have.property('items');\n        done();\n    });",
              "err": {},
              "uuid": "56779fd4-8167-4972-b6f4-46af61a7b385",
              "parentUUID": "a2e4e601-1089-479d-a7c0-77f9efa3cb97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no gear exists",
              "fullTitle": "Gear API Routes should return an empty array if no gear exists",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Gear.deleteMany({});\nconst res = await chai.request(app).get('/api/gear');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "7d9d44c5-1de8-43ad-8bcd-6004afcd224f",
              "parentUUID": "a2e4e601-1089-479d-a7c0-77f9efa3cb97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "56779fd4-8167-4972-b6f4-46af61a7b385",
            "7d9d44c5-1de8-43ad-8bcd-6004afcd224f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "9c1d1a60-a425-4745-b569-8712fa875703",
          "title": "Post API",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
          "file": "\\test\\post.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Post API\"",
              "fullTitle": "Post API \"before each\" hook in \"Post API\"",
              "timedOut": false,
              "duration": 717,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Post.deleteMany({});\nconst user = new User({\n    email: 'test@example.com',\n    password: 'password123',\n    firstName: 'Test',\n    lastName: 'User',\n    gender: 'male',\n    visibility: 'public'\n});\nawait user.save();\nuserId = user._id.toString();\ntoken = jwt.sign({ id: userId, email: user.email }, process.env.JWT_SECRET, {\n    expiresIn: '1h'\n});\nconst post = await Post.create({\n    userId,\n    title: 'Initial Post',\n    description: 'Initial Description',\n    dateOfPost: new Date(),\n    likedByUsers: [],\n    comments: [],\n    likes: 0,\n    photoUrl: ''\n});\npostId = post._id.toString();",
              "err": {},
              "uuid": "24713323-c876-4f53-8af3-06ee59b186ca",
              "parentUUID": "9c1d1a60-a425-4745-b569-8712fa875703",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "04f73b29-2447-4416-b08f-0c8c287a9b2b",
              "title": "GET /getPosts",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all posts with user info and respect user visibility",
                  "fullTitle": "Post API GET /getPosts should return all posts with user info and respect user visibility",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.findByIdAndUpdate(userId, {\n    visibility: 'private',\n    firstName: 'John',\n    lastName: 'Doe',\n    gender: 'male'\n});\nconst res = await chai.request(app).get('/getPosts');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nconst post = res.body[0];\nexpect(post).to.have.property('userId');\nexpect(post.userId).to.include.keys('_id', 'firstName', 'lastName', 'gender');\nexpect(post.userId).to.not.have.property('email');",
                  "err": {},
                  "uuid": "eb9765e1-3005-4af7-8817-5bb37bb719b2",
                  "parentUUID": "04f73b29-2447-4416-b08f-0c8c287a9b2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include full user info if visibility is public",
                  "fullTitle": "Post API GET /getPosts should include full user info if visibility is public",
                  "timedOut": false,
                  "duration": 75,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.findByIdAndUpdate(userId, { visibility: 'public' });\nconst res = await chai.request(app).get('/getPosts');\nexpect(res).to.have.status(200);\nconst post = res.body[0];\nexpect(post.userId).to.have.property('email', 'test@example.com');\nexpect(post.userId).to.have.property('firstName', 'Test');",
                  "err": {},
                  "uuid": "d080e89f-63a7-4b31-b825-1cbe5a4a9599",
                  "parentUUID": "04f73b29-2447-4416-b08f-0c8c287a9b2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb9765e1-3005-4af7-8817-5bb37bb719b2",
                "d080e89f-63a7-4b31-b825-1cbe5a4a9599"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 188,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "ab4f2cce-3f39-41fb-9dfb-07f53d2dab19",
              "title": "GET /getPostsForUser/",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return posts belonging to the authenticated user",
                  "fullTitle": "Post API GET /getPostsForUser/ should return posts belonging to the authenticated user",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/getPostsForUser/')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.some(p => p._id === postId)).to.be.true;",
                  "err": {},
                  "uuid": "2599c683-4694-4c3a-89ae-1b1725f947a7",
                  "parentUUID": "ab4f2cce-3f39-41fb-9dfb-07f53d2dab19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 if no token provided",
                  "fullTitle": "Post API GET /getPostsForUser/ should return 401 if no token provided",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/getPostsForUser/');\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "0625e31f-cb20-4dd2-80dd-7c479533298b",
                  "parentUUID": "ab4f2cce-3f39-41fb-9dfb-07f53d2dab19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2599c683-4694-4c3a-89ae-1b1725f947a7",
                "0625e31f-cb20-4dd2-80dd-7c479533298b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "dfe5080a-3455-40d1-9541-35df8f23dbcb",
              "title": "POST /add",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a post for authenticated user",
                  "fullTitle": "Post API POST /add should create a post for authenticated user",
                  "timedOut": false,
                  "duration": 63,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const postPayload = {\n    title: 'New post',\n    description: 'Post description',\n    photoUrl: 'http://example.com/image.png'\n};\nconst res = await chai\n    .request(app)\n    .post('/add')\n    .set('Cookie', `token=${token}`)\n    .send(postPayload);\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property('message', 'Post created successfully');\nexpect(res.body.post).to.include(postPayload);\nexpect(res.body.post).to.have.property('userId', userId);",
                  "err": {},
                  "uuid": "9805f12c-6170-4740-ae93-f14ba252eb1d",
                  "parentUUID": "dfe5080a-3455-40d1-9541-35df8f23dbcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 without token",
                  "fullTitle": "Post API POST /add should return 401 without token",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/add').send({ title: 'x' });\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "6c6a9d8c-8ff5-4a62-a5be-999a7f4b4f78",
                  "parentUUID": "dfe5080a-3455-40d1-9541-35df8f23dbcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9805f12c-6170-4740-ae93-f14ba252eb1d",
                "6c6a9d8c-8ff5-4a62-a5be-999a7f4b4f78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "2d4eb281-391a-45fc-ab17-27b6f0476f59",
              "title": "PUT /updatePost/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update an existing post",
                  "fullTitle": "Post API PUT /updatePost/:postId should update an existing post",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatePayload = {\n    title: 'Updated title',\n    description: 'Updated desc',\n    photoUrl: 'http://example.com/updated.png',\n    likes: 5,\n    comments: ['Nice!']\n};\nconst res = await chai\n    .request(app)\n    .put(`/updatePost/${postId}`)\n    .set('Cookie', `token=${token}`)\n    .send(updatePayload);\nexpect(res).to.have.status(201);\nexpect(res.body).to.have.property('message', 'Post created successfully');\nexpect(res.body.post.title).to.equal(updatePayload.title);\nexpect(res.body.post.description).to.equal(updatePayload.description);\nexpect(res.body.post.photoUrl).to.equal(updatePayload.photoUrl);\nexpect(res.body.post.likes).to.equal(updatePayload.likes);",
                  "err": {},
                  "uuid": "d58d2fe8-4953-4b74-abd9-9a1a944a208e",
                  "parentUUID": "2d4eb281-391a-45fc-ab17-27b6f0476f59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 without token",
                  "fullTitle": "Post API PUT /updatePost/:postId should return 401 without token",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).put(`/updatePost/${postId}`).send({ title: 'x' });\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "b1fe71cb-cefd-4f61-a163-dc1febdfbe55",
                  "parentUUID": "2d4eb281-391a-45fc-ab17-27b6f0476f59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d58d2fe8-4953-4b74-abd9-9a1a944a208e",
                "b1fe71cb-cefd-4f61-a163-dc1febdfbe55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "0f3553c0-90b5-4532-a949-a9d3644a9330",
              "title": "PUT /updatePostLikes/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should like a post if not already liked",
                  "fullTitle": "Post API PUT /updatePostLikes/:postId should like a post if not already liked",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .put(`/updatePostLikes/${postId}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('You liked this post!');",
                  "err": {},
                  "uuid": "2ecc1637-5963-4073-a4ae-daf3f221a9a2",
                  "parentUUID": "0f3553c0-90b5-4532-a949-a9d3644a9330",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should unlike the post if already liked",
                  "fullTitle": "Post API PUT /updatePostLikes/:postId should unlike the post if already liked",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await chai\n    .request(app)\n    .put(`/updatePostLikes/${postId}`)\n    .set('Cookie', `token=${token}`);\nconst res = await chai\n    .request(app)\n    .put(`/updatePostLikes/${postId}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('You unliked this post.');",
                  "err": {},
                  "uuid": "eee35fbf-5d6e-48e7-940a-2207fa9e05c1",
                  "parentUUID": "0f3553c0-90b5-4532-a949-a9d3644a9330",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if post does not exist",
                  "fullTitle": "Post API PUT /updatePostLikes/:postId should return 404 if post does not exist",
                  "timedOut": false,
                  "duration": 83,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .put('/updatePostLikes/507f1f77bcf86cd799439011')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(404);\nexpect(res.body.message).to.equal('Post not found');",
                  "err": {},
                  "uuid": "815abe90-f92a-4c30-b64e-1c28516057b8",
                  "parentUUID": "0f3553c0-90b5-4532-a949-a9d3644a9330",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ecc1637-5963-4073-a4ae-daf3f221a9a2",
                "eee35fbf-5d6e-48e7-940a-2207fa9e05c1",
                "815abe90-f92a-4c30-b64e-1c28516057b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 391,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "c06aeec7-9313-4bf4-bbac-48af71bb8496",
              "title": "PUT /updatePostComments/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 500 if error occurs",
                  "fullTitle": "Post API PUT /updatePostComments/:postId should return 500 if error occurs",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .put('/updatePostComments/invalidid')\n    .send({ comments: { currentUserComments: 'test' } });\nexpect(res).to.have.status(500);",
                  "err": {},
                  "uuid": "4bf99f7d-61ff-4ed8-bc87-3bd230b7d003",
                  "parentUUID": "c06aeec7-9313-4bf4-bbac-48af71bb8496",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bf99f7d-61ff-4ed8-bc87-3bd230b7d003"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "54e4996e-43d8-4ddf-b1dc-6c7fb6c222db",
              "title": "DELETE /deletePost/:id",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete the post",
                  "fullTitle": "Post API DELETE /deletePost/:id should delete the post",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newPost = await Post.create({\n    userId,\n    title: 'To be deleted',\n    description: 'Delete me',\n    dateOfPost: new Date(),\n    likedByUsers: [],\n    photoUrl: ''\n});\nconst res = await chai.request(app).delete(`/deletePost/${newPost._id}`);\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('Post deleted successfully');\nexpect(res.body.user._id).to.equal(newPost._id.toString());\nconst deleted = await Post.findById(newPost._id);\nexpect(deleted).to.be.null;",
                  "err": {},
                  "uuid": "f363d154-46c9-4fde-a13a-0d893389abe0",
                  "parentUUID": "54e4996e-43d8-4ddf-b1dc-6c7fb6c222db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if post not found",
                  "fullTitle": "Post API DELETE /deletePost/:id should return 404 if post not found",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).delete('/deletePost/507f1f77bcf86cd799439011');\nexpect(res).to.have.status(404);\nexpect(res.body.message).to.equal('Post not found');",
                  "err": {},
                  "uuid": "665e4e19-0d3c-4de0-9c0b-013b574bed3d",
                  "parentUUID": "54e4996e-43d8-4ddf-b1dc-6c7fb6c222db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f363d154-46c9-4fde-a13a-0d893389abe0",
                "665e4e19-0d3c-4de0-9c0b-013b574bed3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 152,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "1d1c2710-8a6b-4703-a744-1da3632bd8cf",
              "title": "GET /postLikeStatus/:postId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\post.test.js",
              "file": "\\test\\post.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return liked: true if user liked the post",
                  "fullTitle": "Post API GET /postLikeStatus/:postId should return liked: true if user liked the post",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const post = await Post.findById(postId);\npost.likedByUsers = [userId];\nawait post.save();\nconst res = await chai\n    .request(app)\n    .get(`/postLikeStatus/${postId}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.liked).to.be.true;",
                  "err": {},
                  "uuid": "7b42d95b-24f7-4b2d-9d25-961c5148ff83",
                  "parentUUID": "1d1c2710-8a6b-4703-a744-1da3632bd8cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return liked: false if user did not like the post",
                  "fullTitle": "Post API GET /postLikeStatus/:postId should return liked: false if user did not like the post",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const post = await Post.findById(postId);\npost.likedByUsers = [];\nawait post.save();\nconst res = await chai\n    .request(app)\n    .get(`/postLikeStatus/${postId}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.liked).to.be.false;",
                  "err": {},
                  "uuid": "5d2d0054-1d6d-4f90-ab17-dfb48e272a46",
                  "parentUUID": "1d1c2710-8a6b-4703-a744-1da3632bd8cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if post not found",
                  "fullTitle": "Post API GET /postLikeStatus/:postId should return 404 if post not found",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai\n    .request(app)\n    .get('/postLikeStatus/507f1f77bcf86cd799439011')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(404);",
                  "err": {},
                  "uuid": "b90902ce-bb42-4b7b-bb80-5f26fa800396",
                  "parentUUID": "1d1c2710-8a6b-4703-a744-1da3632bd8cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b42d95b-24f7-4b2d-9d25-961c5148ff83",
                "5d2d0054-1d6d-4f90-ab17-dfb48e272a46",
                "b90902ce-bb42-4b7b-bb80-5f26fa800396"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 275,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "c5f9f078-e01f-4f9e-9c76-09bc1fe36cb9",
          "title": "Tag API",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\tags.test.js",
          "file": "\\test\\tags.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Tag API\"",
              "fullTitle": "Tag API \"before each\" hook in \"Tag API\"",
              "timedOut": false,
              "duration": 69,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Tag.deleteMany({});\nawait Tag.insertMany(sampleTags);",
              "err": {},
              "uuid": "f5f85410-e810-46b9-86cd-2fe3bfefbc52",
              "parentUUID": "c5f9f078-e01f-4f9e-9c76-09bc1fe36cb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Tag API\"",
              "fullTitle": "Tag API \"after each\" hook in \"Tag API\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Tag.deleteMany({});",
              "err": {},
              "uuid": "f6037503-94c5-4e77-9557-db0899c8858c",
              "parentUUID": "c5f9f078-e01f-4f9e-9c76-09bc1fe36cb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "650b6302-eaee-470e-84ad-ac3988570c0f",
              "title": "GET /api/tags",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\tags.test.js",
              "file": "\\test\\tags.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all tags",
                  "fullTitle": "Tag API GET /api/tags should return all tags",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/api/tags');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.equal(2);\nexpect(res.body[0]).to.have.property('name');\nexpect(res.body[0]).to.have.property('name', 'Scenic');\nexpect(res.body[1]).to.have.property('name', 'Challenging');",
                  "err": {},
                  "uuid": "513d6e7d-9859-4872-8b24-c93135cd4567",
                  "parentUUID": "650b6302-eaee-470e-84ad-ac3988570c0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty array when no tags exist",
                  "fullTitle": "Tag API GET /api/tags should return an empty array when no tags exist",
                  "timedOut": false,
                  "duration": 71,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Tag.deleteMany({});\nconst res = await chai.request(app).get('/api/tags');\nexpect(res).to.have.status(200);\nexpect(res.body).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f5c80902-9b78-449b-9435-c2e5329a1863",
                  "parentUUID": "650b6302-eaee-470e-84ad-ac3988570c0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "513d6e7d-9859-4872-8b24-c93135cd4567",
                "f5c80902-9b78-449b-9435-c2e5329a1863"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 110,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "70a2971a-ffd8-4b45-b81f-91bf3a051cfd",
          "title": "Trail API Test Collection",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trails.test.js",
          "file": "\\test\\trails.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get all 5 trails",
              "fullTitle": "Trail API Test Collection should get all 5 trails",
              "timedOut": false,
              "duration": 47,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n    .get('/api/trails/getTrails')\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('array').with.lengthOf(4);\n        expect(res.body[0]).to.include.keys(\n            '_id', 'name', 'latitude', 'longitude', 'photoUrl', 'location',\n            'description', 'avgElevationM', 'difficulty', 'distanceKm', 'tags'\n        );\n        done();\n    });",
              "err": {},
              "uuid": "96b2764f-6c30-4b16-8429-cb096eec32cd",
              "parentUUID": "70a2971a-ffd8-4b45-b81f-91bf3a051cfd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c88ad018-1814-420a-a9e0-2f4a2e17527f",
              "title": "POST /addTrail",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trails.test.js",
              "file": "\\test\\trails.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new trail",
                  "fullTitle": "Trail API Test Collection POST /addTrail should create a new trail",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trails/addTrail')\n    .send({\n        name: \"New Trail\",\n        distanceKm: 4.2,\n        avgElevationM: 200,\n        timeMinutes: 60,\n        location: \"Somewhere\",\n        photoUrl: \"http://example.com/new.jpg\",\n        description: \"Just testing.\",\n        latitude: 49.0,\n        longitude: -123.0,\n        tags: []\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(201);\n        expect(res.body.message).to.equal(\"Trail added successfully\");\n        expect(res.body.trail).to.include({ name: \"New Trail\" });\n        done();\n    });",
                  "err": {},
                  "uuid": "9cfdbdca-5e9e-4e9c-a122-3bf3197a608c",
                  "parentUUID": "c88ad018-1814-420a-a9e0-2f4a2e17527f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cfdbdca-5e9e-4e9c-a122-3bf3197a608c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "def6ec3e-3b33-421d-9185-3af35a3473ab",
              "title": "GET /getTrailById/:id",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trails.test.js",
              "file": "\\test\\trails.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should fetch a trail by valid ID",
                  "fullTitle": "Trail API Test Collection GET /getTrailById/:id should fetch a trail by valid ID",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .get(`/api/trails/getTrailById/${trailId}`)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('_id', trailId);\n        expect(res.body.name).to.equal(\"Sunset Ridge Trail\");\n        done();\n    });",
                  "err": {},
                  "uuid": "a02a6f20-72e1-4dfe-babe-696261583488",
                  "parentUUID": "def6ec3e-3b33-421d-9185-3af35a3473ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for non-existing ID",
                  "fullTitle": "Trail API Test Collection GET /getTrailById/:id should return 404 for non-existing ID",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeId = new mongoose.Types.ObjectId();\nchai.request(server)\n    .get(`/api/trails/getTrailById/${fakeId}`)\n    .end((err, res) => {\n        expect(res).to.have.status(404);\n        expect(res.body.message).to.equal('Trail not found');\n        done();\n    });",
                  "err": {},
                  "uuid": "93696f10-25a9-4815-9040-36f9cd2e09d6",
                  "parentUUID": "def6ec3e-3b33-421d-9185-3af35a3473ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a02a6f20-72e1-4dfe-babe-696261583488",
                "93696f10-25a9-4815-9040-36f9cd2e09d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [
            "96b2764f-6c30-4b16-8429-cb096eec32cd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "7cd59407-a29c-42ab-a6ad-a3f88f2f2490",
          "title": "Trip API Routes",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
          "file": "\\test\\trip.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Trip API Routes\"",
              "fullTitle": "Trip API Routes \"before each\" hook in \"Trip API Routes\"",
              "timedOut": false,
              "duration": 784,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Trail.deleteMany({});\nawait Trip.deleteMany({});\nuser = await User.create({ username: 'testuser', email: 'test@example.com', password: 'testpassword123' });\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret', { expiresIn: '1h' });\ntrail = await Trail.create(sampleTrail);",
              "err": {},
              "uuid": "9cb8e6e5-ef31-45f6-93d6-530ff70823cf",
              "parentUUID": "7cd59407-a29c-42ab-a6ad-a3f88f2f2490",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Trip API Routes\"",
              "fullTitle": "Trip API Routes \"after each\" hook in \"Trip API Routes\"",
              "timedOut": false,
              "duration": 99,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\nawait Trail.deleteMany({});\nawait Trip.deleteMany({});",
              "err": {},
              "uuid": "abf7255b-ff42-4f31-99bb-7ee083c872ba",
              "parentUUID": "7cd59407-a29c-42ab-a6ad-a3f88f2f2490",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c44ec12a-edde-476f-b43c-fce09b4172ff",
              "title": "POST /save",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save a new trip with status \"Upcoming\"",
                  "fullTitle": "Trip API Routes POST /save should save a new trip with status \"Upcoming\"",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trips/save')\n    .set('Cookie', `token=${token}`)\n    .send({\n        trailID: trail._id,\n        startDate: new Date(),\n        endDate: new Date(),\n        time: 100\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(201);\n        expect(res.body.message).to.equal('Trip saved successfully!');\n        expect(res.body.trip.status).to.equal('Upcoming');\n        done();\n    });",
                  "err": {},
                  "uuid": "e7623228-8bd1-4229-b74a-f5136d5d7f6e",
                  "parentUUID": "c44ec12a-edde-476f-b43c-fce09b4172ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error when required fields are missing",
                  "fullTitle": "Trip API Routes POST /save should return error when required fields are missing",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trips/save')\n    .set('Cookie', `token=${token}`)\n    .send({\n        trailID: trail._id,\n        startDate: new Date(),\n        time: 100\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body.success).to.equal(false);\n        expect(res.body.message).to.equal('Trail ID, start date, end date, and time are required');\n        done();\n    });",
                  "err": {},
                  "uuid": "1dc88f5c-ae06-4434-930c-59ea48f717c6",
                  "parentUUID": "c44ec12a-edde-476f-b43c-fce09b4172ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7623228-8bd1-4229-b74a-f5136d5d7f6e",
                "1dc88f5c-ae06-4434-930c-59ea48f717c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "e386c260-6770-4d29-9931-c8e084497a84",
              "title": "POST /start",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should start a new trip with status \"In Progress\"",
                  "fullTitle": "Trip API Routes POST /start should start a new trip with status \"In Progress\"",
                  "timedOut": false,
                  "duration": 144,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trips/start')\n    .set('Cookie', `token=${token}`)\n    .send({\n        trailID: trail._id,\n        startDate: new Date(),\n        endDate: new Date(),\n        time: 100\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(201);\n        expect(res.body.message).to.equal('Trip started successfully!');\n        expect(res.body.trip.status).to.equal('In Progress');\n        done();\n    });",
                  "err": {},
                  "uuid": "ec4fc270-7bd2-403f-9533-5c44dc895c5a",
                  "parentUUID": "e386c260-6770-4d29-9931-c8e084497a84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if the trip has no required fields",
                  "fullTitle": "Trip API Routes POST /start should return error if the trip has no required fields",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/trips/start')\n    .set('Cookie', `token=${token}`)\n    .send({\n        trailID: trail._id,\n        startDate: new Date(),\n        time: 100\n    })\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body.success).to.equal(false);\n        expect(res.body.message).to.equal('Trail ID, start date, end date, and time are required');\n        done();\n    });",
                  "err": {},
                  "uuid": "f405a815-04d2-48e0-9c55-717456436dd1",
                  "parentUUID": "e386c260-6770-4d29-9931-c8e084497a84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec4fc270-7bd2-403f-9533-5c44dc895c5a",
                "f405a815-04d2-48e0-9c55-717456436dd1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 167,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "047e723c-bb1d-48dd-ab78-bf19a03a1f0f",
              "title": "GET /",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should retrieve all user trips",
                  "fullTitle": "Trip API Routes GET / should retrieve all user trips",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await Trip.create({ userId: user._id, trailID: trail._id, startDate: new Date(), endDate: new Date(), time: 60, status: 'Upcoming' });\nconst res = await chai.request(server)\n    .get('/api/trips/')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.success).to.be.true;\nexpect(res.body.trips).to.be.an('array').with.lengthOf(1);",
                  "err": {},
                  "uuid": "529d407c-898c-4f87-9bf4-b08dbac7999b",
                  "parentUUID": "047e723c-bb1d-48dd-ab78-bf19a03a1f0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an empty array if the user has no trips",
                  "fullTitle": "Trip API Routes GET / should return an empty array if the user has no trips",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .get('/api/trips/')\n    .set('Cookie', `token=${token}`)\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body.success).to.be.true;\n        expect(res.body.trips).to.be.an('array').that.is.empty;\n        done();\n    });",
                  "err": {},
                  "uuid": "5903c43e-67eb-4789-89f5-192d36b2802a",
                  "parentUUID": "047e723c-bb1d-48dd-ab78-bf19a03a1f0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "529d407c-898c-4f87-9bf4-b08dbac7999b",
                "5903c43e-67eb-4789-89f5-192d36b2802a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 187,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "7e252e60-761f-4da1-9d0f-8b122c741f44",
              "title": "PUT /updateStatus/:tripId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update the trip status",
                  "fullTitle": "Trip API Routes PUT /updateStatus/:tripId should update the trip status",
                  "timedOut": false,
                  "duration": 117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trip = await Trip.create({ userId: user._id, trailID: trail._id, startDate: new Date(), endDate: new Date(), time: 60, status: 'Upcoming' });\nconst res = await chai.request(server)\n    .put(`/api/trips/updateStatus/${trip._id}`)\n    .set('Cookie', `token=${token}`)\n    .send({ status: 'Completed' });\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('Trip status updated successfully');\nexpect(res.body.trip.status).to.equal('Completed');",
                  "err": {},
                  "uuid": "180b4681-eca6-4dd5-9d7e-874cb2f3261c",
                  "parentUUID": "7e252e60-761f-4da1-9d0f-8b122c741f44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return an error if status is invalid",
                  "fullTitle": "Trip API Routes PUT /updateStatus/:tripId should return an error if status is invalid",
                  "timedOut": false,
                  "duration": 56,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trip = await Trip.create({ userId: user._id, trailID: trail._id, startDate: new Date(), endDate: new Date(), time: 60, status: 'Upcoming' });\nconst res = await chai.request(server)\n    .put(`/api/trips/updateStatus/${trip._id}`)\n    .set('Cookie', `token=${token}`)\n    .send({ status: 'InvalidStatus' });\nexpect(res).to.have.status(400);\nexpect(res.body.message).to.equal('Invalid status. Must be Upcoming, In Progress, or Completed');",
                  "err": {},
                  "uuid": "89f6af7e-6b48-4fda-85be-a6ecc2fa5406",
                  "parentUUID": "7e252e60-761f-4da1-9d0f-8b122c741f44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "180b4681-eca6-4dd5-9d7e-874cb2f3261c",
                "89f6af7e-6b48-4fda-85be-a6ecc2fa5406"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 173,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "551856a7-4499-4f4e-8e94-c36e8cdb0780",
              "title": "DELETE /delete/:tripId",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\trip.test.js",
              "file": "\\test\\trip.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a user's trip",
                  "fullTitle": "Trip API Routes DELETE /delete/:tripId should delete a user's trip",
                  "timedOut": false,
                  "duration": 104,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trip = await Trip.create({ userId: user._id, trailID: trail._id, startDate: new Date(), endDate: new Date(), time: 60, status: 'Upcoming' });\nconst res = await chai.request(server)\n    .delete(`/api/trips/delete/${trip._id}`)\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body.message).to.equal('Trip deleted successfully');",
                  "err": {},
                  "uuid": "079819f3-27cc-4953-946d-57533988b66d",
                  "parentUUID": "551856a7-4499-4f4e-8e94-c36e8cdb0780",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if trip not found",
                  "fullTitle": "Trip API Routes DELETE /delete/:tripId should return error if trip not found",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(server)\n    .delete('/api/trips/delete/60d7e14f7c411e6348f9f71d')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(404);\nexpect(res.body.message).to.equal('Trip not found or not authorized');",
                  "err": {},
                  "uuid": "ba7358dd-ae55-4aaf-8f06-41d86c671c5d",
                  "parentUUID": "551856a7-4499-4f4e-8e94-c36e8cdb0780",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "079819f3-27cc-4953-946d-57533988b66d",
                "ba7358dd-ae55-4aaf-8f06-41d86c671c5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 153,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        },
        {
          "uuid": "a855628d-eb9b-4c8f-8763-739c5904cea1",
          "title": "User API",
          "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
          "file": "\\test\\user.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"User API\"",
              "fullTitle": "User API \"before all\" hook in \"User API\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});",
              "err": {},
              "uuid": "10a0954c-9949-4585-a48d-aa06faafa415",
              "parentUUID": "a855628d-eb9b-4c8f-8763-739c5904cea1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User API\"",
              "fullTitle": "User API \"after each\" hook in \"User API\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await User.deleteMany({});\ntoken = null;\nuserId = null;",
              "err": {},
              "uuid": "441fd7f9-2e70-4d51-bef1-379def8eb535",
              "parentUUID": "a855628d-eb9b-4c8f-8763-739c5904cea1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3d8d87f0-cf9d-4974-88b8-a62e52fce148",
              "title": "POST /register/auth",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user and return token cookie",
                  "fullTitle": "User API POST /register/auth should register a new user and return token cookie",
                  "timedOut": false,
                  "duration": 760,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/register/auth')\n    .send({ email: 'test@example.com', password: 'password123' });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('success', true);\nexpect(res.body).to.have.property('user', 'test@example.com');\nexpect(res).to.have.cookie('token');\nconst user = await User.findOne({ email: 'test@example.com' });\nexpect(user).to.exist;\nuserId = user._id;",
                  "err": {},
                  "uuid": "9cfe2ecc-9fb7-4bd3-be76-d289524758ac",
                  "parentUUID": "3d8d87f0-cf9d-4974-88b8-a62e52fce148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register without email or password",
                  "fullTitle": "User API POST /register/auth should not register without email or password",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/register/auth')\n    .send({ email: '' });\nexpect(res).to.have.status(400);\nexpect(res.body).to.have.property('success', false);\nexpect(res.body.message).to.equal('Email and password are required');",
                  "err": {},
                  "uuid": "ba2f843c-786c-4fd8-835d-672ba117565a",
                  "parentUUID": "3d8d87f0-cf9d-4974-88b8-a62e52fce148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register duplicate email",
                  "fullTitle": "User API POST /register/auth should not register duplicate email",
                  "timedOut": false,
                  "duration": 766,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await User.create({ email: 'dup@example.com', password: 'password123' });\nconst res = await chai.request(app)\n    .post('/api/users/register/auth')\n    .send({ email: 'dup@example.com', password: 'password123' });\nexpect(res).to.have.status(500);\nexpect(res.body).to.have.property('success', false);\nexpect(res.body.error).to.include('Email already registered');",
                  "err": {},
                  "uuid": "09f29fb5-b21f-4a4e-9057-18bc8e947657",
                  "parentUUID": "3d8d87f0-cf9d-4974-88b8-a62e52fce148",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cfe2ecc-9fb7-4bd3-be76-d289524758ac",
                "ba2f843c-786c-4fd8-835d-672ba117565a",
                "09f29fb5-b21f-4a4e-9057-18bc8e947657"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1540,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b37d5428-f348-4e61-9dd9-1a6fb1555720",
              "title": "POST /login/auth",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /login/auth\"",
                  "fullTitle": "User API POST /login/auth \"before each\" hook in \"POST /login/auth\"",
                  "timedOut": false,
                  "duration": 789,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = new User({ email: 'login@example.com', password: 'password123' });\nawait user.save();",
                  "err": {},
                  "uuid": "0ec716fd-4bbe-407b-bdf6-3bf33a9dd163",
                  "parentUUID": "b37d5428-f348-4e61-9dd9-1a6fb1555720",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login with correct credentials and set token cookie",
                  "fullTitle": "User API POST /login/auth should login with correct credentials and set token cookie",
                  "timedOut": false,
                  "duration": 773,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/login/auth')\n    .send({ email: 'login@example.com', password: 'password123' });\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('success', true);\nexpect(res.body.message).to.equal('Login successful');\nexpect(res.body.user).to.have.property('email', 'login@example.com');\nexpect(res).to.have.cookie('token');\ntoken = res.header['set-cookie'][0];",
                  "err": {},
                  "uuid": "05efd8c3-3f89-46da-abce-d4199cf6da00",
                  "parentUUID": "b37d5428-f348-4e61-9dd9-1a6fb1555720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail login with invalid credentials",
                  "fullTitle": "User API POST /login/auth should fail login with invalid credentials",
                  "timedOut": false,
                  "duration": 854,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/login/auth')\n    .send({ email: 'login@example.com', password: 'wrongpass' });\nexpect(res).to.have.status(401);\nexpect(res.body).to.have.property('success', false);\nexpect(res.body.message).to.equal('Invalid credentials');",
                  "err": {},
                  "uuid": "54a1c529-55e5-46ff-81e2-b5b834d88f33",
                  "parentUUID": "b37d5428-f348-4e61-9dd9-1a6fb1555720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail login with non-existing user",
                  "fullTitle": "User API POST /login/auth should fail login with non-existing user",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/login/auth')\n    .send({ email: 'nouser@example.com', password: 'password123' });\nexpect(res).to.have.status(401);\nexpect(res.body).to.have.property('success', false);\nexpect(res.body.message).to.equal('Invalid credentials');",
                  "err": {},
                  "uuid": "88ceda73-f575-4467-83a4-0b77217f63a6",
                  "parentUUID": "b37d5428-f348-4e61-9dd9-1a6fb1555720",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05efd8c3-3f89-46da-abce-d4199cf6da00",
                "54a1c529-55e5-46ff-81e2-b5b834d88f33",
                "88ceda73-f575-4467-83a4-0b77217f63a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1666,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "dc5a3648-bb1c-4872-af45-6ba1eab3de5a",
              "title": "GET /me",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /me\"",
                  "fullTitle": "User API GET /me \"before each\" hook in \"GET /me\"",
                  "timedOut": false,
                  "duration": 751,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = new User({ email: 'me@example.com', password: 'password123' });\nawait user.save();\nuserId = user._id;\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret');",
                  "err": {},
                  "uuid": "04454478-eb65-4e14-9f28-92a2256eb449",
                  "parentUUID": "dc5a3648-bb1c-4872-af45-6ba1eab3de5a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get current user info with valid token",
                  "fullTitle": "User API GET /me should get current user info with valid token",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .get('/api/users/me')\n    .set('Cookie', `token=${token}`);\nexpect(res).to.have.status(200);\nexpect(res.body).to.have.property('email', 'me@example.com');\nexpect(res.body).to.not.have.property('password');",
                  "err": {},
                  "uuid": "ccd0533d-1737-4c88-8967-af86dff96e17",
                  "parentUUID": "dc5a3648-bb1c-4872-af45-6ba1eab3de5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if user does not exist",
                  "fullTitle": "User API GET /me should return 404 if user does not exist",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeId = new mongoose.Types.ObjectId();\nconst fakeToken = jwt.sign({ id: fakeId, email: 'fake@example.com' }, process.env.JWT_SECRET || 'testsecret');\nconst res = await chai.request(app)\n    .get('/api/users/me')\n    .set('Cookie', `token=${fakeToken}`);\nexpect(res).to.have.status(404);\nexpect(res.body.message).to.equal('User not found');",
                  "err": {},
                  "uuid": "a013f326-29d7-4afe-bb14-0ff996c31f7c",
                  "parentUUID": "dc5a3648-bb1c-4872-af45-6ba1eab3de5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 if no token provided",
                  "fullTitle": "User API GET /me should return 401 if no token provided",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).get('/api/users/me');\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "65336e05-de17-4fb8-9a53-f8443f810fec",
                  "parentUUID": "dc5a3648-bb1c-4872-af45-6ba1eab3de5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccd0533d-1737-4c88-8967-af86dff96e17",
                "a013f326-29d7-4afe-bb14-0ff996c31f7c",
                "65336e05-de17-4fb8-9a53-f8443f810fec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 113,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "45a92206-24fe-4f55-86de-c80423fee5bf",
              "title": "POST /register/setup",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /register/setup\"",
                  "fullTitle": "User API POST /register/setup \"before each\" hook in \"POST /register/setup\"",
                  "timedOut": false,
                  "duration": 759,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = new User({ email: 'setup@example.com', password: 'password123' });\nawait user.save();\nuserId = user._id;\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret');",
                  "err": {},
                  "uuid": "aa3df4dd-acba-4360-9880-62e197587cd7",
                  "parentUUID": "45a92206-24fe-4f55-86de-c80423fee5bf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update user profile and mark profileCompleted",
                  "fullTitle": "User API POST /register/setup should update user profile and mark profileCompleted",
                  "timedOut": false,
                  "duration": 72,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const profileData = {\n    firstName: 'John',\n    lastName: 'Doe',\n    badge: 'Intermediate',\n    gender: 'male',\n    nickname: 'JD',\n    country: 'USA',\n    gear: [{ category: 'Clothing', item: 'Jacket' }],\n    visibility: 'private'\n};\nconst res = await chai.request(app)\n    .post('/api/users/register/setup')\n    .set('Cookie', `token=${token}`)\n    .send(profileData);\nexpect(res).to.have.status(200);\nexpect(res.body.success).to.be.true;\nconsole.log(res.body.user)\nconst resUser = res.body.user;\nexpect(resUser.firstName).to.equal(profileData.firstName);\nexpect(resUser.lastName).to.equal(profileData.lastName);\nexpect(resUser.badge).to.equal(profileData.badge);\nexpect(resUser.gender).to.equal(profileData.gender);\nexpect(resUser.nickname).to.equal(profileData.nickname);\nexpect(resUser.country).to.equal(profileData.country);\nexpect(resUser.visibility).to.equal(profileData.visibility);\nexpect(res.body.user.gear.length).to.deep.equal(profileData.gear.length);\nexpect(res.body.user.profileCompleted).to.be.true;",
                  "err": {},
                  "uuid": "d0b4fe8d-89f8-4c83-aba1-17e511b8722f",
                  "parentUUID": "45a92206-24fe-4f55-86de-c80423fee5bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 if user not found",
                  "fullTitle": "User API POST /register/setup should return 500 if user not found",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeToken = jwt.sign({ id: new mongoose.Types.ObjectId(), email: 'fake@example.com' }, process.env.JWT_SECRET || 'testsecret');\nconst res = await chai.request(app)\n    .post('/api/users/register/setup')\n    .set('Cookie', `token=${fakeToken}`)\n    .send({ firstName: 'Jane' });\nexpect(res).to.have.status(500);\nexpect(res.body.success).to.be.false;\nexpect(res.body.message).to.equal('User not found');",
                  "err": {},
                  "uuid": "30dce5af-d78c-40ec-a13d-8c3ada4850a3",
                  "parentUUID": "45a92206-24fe-4f55-86de-c80423fee5bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0b4fe8d-89f8-4c83-aba1-17e511b8722f",
                "30dce5af-d78c-40ec-a13d-8c3ada4850a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 129,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "1f8ba70f-5660-47ab-90cf-030a11d277cd",
              "title": "POST /logout",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should clear token cookie and logout successfully",
                  "fullTitle": "User API POST /logout should clear token cookie and logout successfully",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app).post('/api/users/logout');\nexpect(res).to.have.status(200);\nexpect(res.body.success).to.be.true;\nexpect(res.body.message).to.equal('Logged out successfully');\nexpect(res.header['set-cookie'][0]).to.include('token=;'); // cleared cookie",
                  "err": {},
                  "uuid": "e42a082d-9858-465a-ac80-71f0719c595c",
                  "parentUUID": "1f8ba70f-5660-47ab-90cf-030a11d277cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e42a082d-9858-465a-ac80-71f0719c595c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            },
            {
              "uuid": "b703a281-53f4-427c-9249-849df1eac3fa",
              "title": "POST /update/gear",
              "fullFile": "C:\\Users\\pranj\\IdeaProjects\\team26---\\backend\\test\\user.test.js",
              "file": "\\test\\user.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /update/gear\"",
                  "fullTitle": "User API POST /update/gear \"before each\" hook in \"POST /update/gear\"",
                  "timedOut": false,
                  "duration": 799,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user = new User({ email: 'gear@example.com', password: 'password123' });\nawait user.save();\nuserId = user._id;\ntoken = jwt.sign({ id: user._id, email: user.email }, process.env.JWT_SECRET || 'testsecret');",
                  "err": {},
                  "uuid": "8fee57c3-08b6-45a6-81fc-4a09f68ee214",
                  "parentUUID": "b703a281-53f4-427c-9249-849df1eac3fa",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update user gear with valid token",
                  "fullTitle": "User API POST /update/gear should update user gear with valid token",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const gearData = [{ category: 'Electronics', item: 'GPS' }, { category: 'Clothing', item: 'Hat' }];\nconst res = await chai.request(app)\n    .post('/api/users/update/gear')\n    .set('Cookie', `token=${token}`)\n    .send({ gear: gearData });\nexpect(res).to.have.status(200);\nexpect(res.body.success).to.be.true;\nexpect(res.body.message).to.equal('Gear updated successfully');\nconsole.log(res.body.user.gear)\nconst returnedGear = res.body.user.gear.map(({ category, item }) => ({ category, item }));\nexpect(returnedGear).to.deep.equal(gearData);\n// expect(res.body.user.gear).to.deep.equal(gearData);",
                  "err": {},
                  "uuid": "944a21bf-cef2-4e2e-a9b4-f0ac85507bd9",
                  "parentUUID": "b703a281-53f4-427c-9249-849df1eac3fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if user not found",
                  "fullTitle": "User API POST /update/gear should return 404 if user not found",
                  "timedOut": false,
                  "duration": 54,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeToken = jwt.sign({ id: new mongoose.Types.ObjectId(), email: 'fake@example.com' }, process.env.JWT_SECRET || 'testsecret');\nconst res = await chai.request(app)\n    .post('/api/users/update/gear')\n    .set('Cookie', `token=${fakeToken}`)\n    .send({ gear: [] });\nexpect(res).to.have.status(404);\nexpect(res.body.success).to.be.false;\nexpect(res.body.message).to.equal('User not found');",
                  "err": {},
                  "uuid": "eca756c3-8d94-41f9-9afa-64644fa7f05a",
                  "parentUUID": "b703a281-53f4-427c-9249-849df1eac3fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 if no token provided",
                  "fullTitle": "User API POST /update/gear should return 401 if no token provided",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await chai.request(app)\n    .post('/api/users/update/gear')\n    .send({ gear: [] });\nexpect(res).to.have.status(401);",
                  "err": {},
                  "uuid": "0362b3f2-acc9-455b-b46d-5bf64b87e509",
                  "parentUUID": "b703a281-53f4-427c-9249-849df1eac3fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "944a21bf-cef2-4e2e-a9b4-f0ac85507bd9",
                "eca756c3-8d94-41f9-9afa-64644fa7f05a",
                "0362b3f2-acc9-455b-b46d-5bf64b87e509"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 139,
              "root": false,
              "rootEmpty": false,
              "_timeout": 15000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 15000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 15000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}